{"version":3,"sources":["components/AuthenticationSegment.js","components/CloseWidgetBtn.js","components/MainMenu.js","components/Intro.js","components/PollMenu.js","components/CreateNewPoll.js","components/ShowPoll.js","components/Register.js","components/Login.js","App.js","serviceWorker.js","index.js","components/widgetStyle.js"],"names":["AuthenticationSegment","logout","axios","get","then","res","console","log","data","_this","props","updateParentState","authenticated","username","attemptedLogin","catch","e","alert","react_default","a","createElement","className","onClick","this","showRegister","showLogin","notAuthenticated","Component","CloseWidgetBtn","close","MainMenu","visibleOptions","Object","toConsumableArray","widgets","filter","option","listItems","map","widget","widgetShowing","visibleWidgets","includes","liStyle","textShadow","cursor","toggleWidget","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","closeWidget","showWidget","bringMenuToFront","stop","apply","arguments","key","style","id","widgetStyle","order","showing","components_CloseWidgetBtn","options","Intro","PollMenu","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchQuery","list","showList","bind","assertThisInitialized","handleChange","getPollList","listCall","forEach","poll","dateAdded","Date","lastVotedOn","setState","t0","_this2","length","regex","RegExp","test","question","showingPollId","showPoll","category","sort","b","defineProperty","target","name","value","needsUpdate","pollMenuNeedsUpdate","sortList","_this3","onChange","type","aria-label","role","CreateNewPoll","choices","submitAttempted","submitSucceeded","handleSubmit","addNewChoice","author","post","response","status","preventDefault","width","height","choice","index","arrayForUpdate","slice","required","splice","blankSpace","concat","_this4","message","onSubmit","showSubmitStatus","showForm","ShowPoll","pollId","submittedVote","pollData","responseData","getPollData","pollCall","ip","voteResponse","_context2","castVote","choiceCount","datum","count","showResults","showChoiceBtns","Register","password","email","submitted","errorMessage","successMessage","_this$state","setTimeout","showSuccess","registrationForm","Login","failedMessage","loggedIn","loginForm","INTRO","MAIN_MENU","POLL_MENU","App","stateObject","widgetName","containsMenu","otherWidgets","updateArray","unshift","orderOf","indexOf","components_AuthenticationSegment","components_MainMenu","replace","components_Intro","components_PollMenu","components_CreateNewPoll","components_ShowPoll","components_Register","components_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","display","animation"],"mappings":"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","file":"static/js/main.64c112a6.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\n\nclass AuthenticationSegment extends Component {\n    logout = () => {\n        axios.get('/logout')\n            .then(res => {\n                console.log(res.data);\n                // this.props.updateAuthenticationStatus(false, \"\");\n                this.props.updateParentState({\n                    authenticated: false,\n                    username: \"\",\n                    attemptedLogin: false\n                });\n            })\n            .catch(e => {\n                alert(\"There was an error connecting, please check console for the error\");\n                console.log(e);\n            });\n    };\n\n    notAuthenticated() {\n        return(\n            <div className=\"authenticationLinks\">\n                <p className=\"clickableText\" onClick={this.props.showRegister}>Register</p>\n                <p> || </p>\n                <p className=\"clickableText\" onClick={this.props.showLogin}>Log In</p>\n            </div>\n        );\n    }\n\n    authenticated() {\n        return(\n            <div>\n                <p>Welcome {this.props.username}</p>\n                <p className=\"clickableText\" onClick={this.logout}>Sign Out</p>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.authenticated ? this.authenticated() : this.notAuthenticated()}\n            </div>\n        );\n    }\n}\n\nexport default AuthenticationSegment;","import React, {Component} from 'react';\n\nclass CloseWidgetBtn extends Component {\n    render() {\n        return (\n            <div className={\"closeWidgetBtn\"}>\n                <p onClick={this.props.close} className={\"innerX\"}>X</p>\n            </div>\n        );\n    }\n}\n\nexport default CloseWidgetBtn;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass MainMenu extends Component {\n    options() {\n        let visibleOptions = [...this.props.widgets];\n        if (this.props.authenticated) {\n            visibleOptions = visibleOptions.filter(option => option !== \"Login\" && option !== \"Register\");\n        }\n        let listItems = visibleOptions.map(widget => {\n            const widgetShowing = this.props.visibleWidgets.includes(widget);\n            const liStyle = {\n                textShadow: widgetShowing ? \"0 0 2px gold\" : \"none\",\n                cursor: \"pointer\"\n            };\n            const toggleWidget = async () => {\n                await widgetShowing ?\n                    this.props.closeWidget(widget) :\n                    this.props.showWidget(widget);\n                this.props.bringMenuToFront();\n            };\n            return (\n                <li key={widget} onClick={toggleWidget} style={liStyle}>{widget}</li>\n            );\n        });\n        return(\n            <ul className={\"mainMenuOptions\"}>\n                {listItems}\n            </ul>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Main Menu</h2>\n                    {this.options()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MainMenu;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Intro extends Component {\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Welcome to Cross Voting</h2>\n                    <p>Here you can make your own polls, and have your friends vote on them.</p>\n                    <p>You can do all this without making an account, but if you want to make lots of polls you will need to register.</p>\n                    <p>Registering is super easy, you can do it with a couple clicks if you use your Facebook or Google account.</p>\n                    <p>You can also register using traditional means too.</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Intro;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\n// Strings stored in global variables for consistency and production ease. Used in sorting function.\nconst RECENT = 'dateAdded';\nconst LAST_VOTE = 'lastVotedOn';\nconst MOST_VOTES = 'voteCount';\n\nclass PollMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchQuery: \"\",\n            list: []\n        };\n        this.showList = this.showList.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.getPollList();\n    }\n\n    async getPollList() {\n        try {\n            const listCall = await axios.get('pollList');\n            const list = listCall.data;\n            list.forEach(poll => {\n               poll.dateAdded = new Date(poll.dateAdded);\n               poll.lastVotedOn = new Date(poll.lastVotedOn);\n            });\n            this.setState({list});\n        } catch (e) {\n            alert('There was an error getting polls from the server, see console for error.');\n            console.log(e);\n        }\n    }\n\n    showList() {\n        let list = this.state.list;\n        if (this.state.searchQuery.length > 0) {\n            try {\n                const regex = new RegExp(this.state.searchQuery, 'gi');\n                list = list.filter(poll => regex.test(poll.question));\n            } catch (e) {\n                console.log('invalid regex');\n            }\n        }\n        return list.map(poll => {\n            return(\n                <div>\n                    <p className={\"pollMenuChoice\"} onClick={() => {\n                        this.props.updateParentState({showingPollId: poll.id});\n                        this.props.showPoll();\n                    }}>{poll.question}</p>\n                </div>\n            );\n        })\n    }\n\n    sortList(category) {\n        const list = this.state.list.sort((a,b) => b[category] - a[category]);\n        this.setState({list}, this.showList);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    componentDidUpdate() {\n        if (this.props.needsUpdate) {\n            this.props.updateParentState({pollMenuNeedsUpdate: false});\n            this.sortList();\n        }\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Poll Menu</h2>\n                    <div>\n                        <input\n                            onChange={this.handleChange}\n                            name='searchQuery'\n                            value={this.state.searchQuery}\n                            className={'searchBar'}\n                            type='text'\n                        />\n                        <div className=\"sortBy\">\n                            <p onClick={() => { this.sortList(RECENT) }} className={'clickableText'}>Recently made</p>\n                            <p onClick={() => { this.sortList(LAST_VOTE) }} className={'clickableText'}>Last voted on</p>\n                            <p onClick={() => { this.sortList(MOST_VOTES) }} className={'clickableText'}>Most votes</p>\n                        </div>\n                        <span aria-label={'magnifying glass search icon'} role={'img'} className=\"searchIcon\">🔍</span>\n                        {this.showList()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PollMenu;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\nimport axios from \"axios\";\n\nclass CreateNewPoll extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            question: \"\",\n            choices: [\"\", \"\"],\n            submitAttempted: false,\n            submitSucceeded: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.addNewChoice = this.addNewChoice.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    async handleSubmit(e) {\n        await this.setState({submitAttempted: true});\n        const author = this.props.username;\n        const { question, choices } = this.state;\n        axios.post('/poll', {question, choices, author})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem after connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                this.setState({\n                    question: \"\",\n                    choices: [\"\", \"\"],\n                    submitSucceeded: true\n                });\n                this.props.updateParentState({pollMenuNeedsUpdate: true});\n            })\n            .catch((response) => {\n                //handle error\n                this.setState({\n                    submitSucceeded: false,\n                    submitAttempted: false\n                });\n                console.log(response);\n            });\n        e.preventDefault();\n    }\n\n    blankSpace() {\n        return (\n            <div style={{width: 30, height: 30}}> </div>\n        );\n    }\n\n    choices() {\n        // For each choice, generate an input field with label\n        return this.state.choices.map((choice, index) => {\n            const changeChoice = e => {\n                const arrayForUpdate = this.state.choices.slice();\n                arrayForUpdate[index] = e.target.value;\n                this.setState({choices: arrayForUpdate});\n            };\n            const deleteChoice = () => {\n                let arrayForUpdate = this.state.choices.slice();\n                arrayForUpdate.splice(index, 1);\n                this.setState({choices: arrayForUpdate});\n\n            };\n            return(\n                <div key={\"choice_\"+index} className=\"spaceAround\">\n                    <p>Choice {index+1}: </p>\n                    <input onChange={changeChoice} value={this.state.choices[index]} type=\"text\" required/>\n                    {\n                        // If there's more than 2 choices, you can delete one\n                        this.state.choices.length > 2 ?\n                        <p onClick={deleteChoice} className={\"innerX\"}>X</p> :\n                        this.blankSpace()\n                    }\n                </div>\n            )\n        });\n    }\n\n    addNewChoice(e) {\n        this.setState({choices: [...this.state.choices, \"\"]});\n        e.preventDefault();\n    }\n\n    showSubmitStatus() {\n        const message = this.state.submitSucceeded ? \"Poll successfully submitted\" : \"Sending...\";\n        const goBack = () => {\n            this.setState({\n                submitAttempted: false,\n                submitSucceeded: false\n            });\n        };\n        return(\n            <div>\n                <p className={\"red\"}>{message}</p>\n                <p onClick={goBack} className=\"clickableText\">Back</p>\n            </div>\n        );\n    }\n\n    showForm() {\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"spaceAround\">\n                    <p>Question: </p>\n                    <input name={\"question\"} onChange={this.handleChange} type=\"text\" value={this.state.question} required/>\n                    {this.blankSpace()}\n                </div>\n                {this.choices()}\n                <button className={\"addNewChoiceBtn\"} onClick={this.addNewChoice}>Add New Choice</button>\n                <br/>\n                <input className={\"submitBtn\"} type=\"submit\" value=\"Submit Poll\"/>\n            </form>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Create New Poll</h2>\n                    {this.state.submitAttempted ? this.showSubmitStatus() : this.showForm()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CreateNewPoll;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass ShowPoll extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pollId: this.props.pollId,\n            submittedVote: false,\n            pollData: {\n                question: \"\",\n                choices: [],\n                author: \"\"\n            },\n            responseData: []\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.pollId !== this.state.pollId) {\n            this.setState({\n                pollId: this.props.pollId,\n                submittedVote: false\n            }, this.getPollData);\n        }\n    }\n\n    async getPollData() {\n        try {\n            const pollCall = await axios.get('pollData/' + this.props.pollId);\n            const pollData = pollCall.data;\n            this.setState({pollData});\n        } catch (e) {\n            alert(\"There was an error getting the poll data from the server\");\n            console.log(e);\n        }\n    }\n\n    async castVote(choice) {\n        try {\n            let username = this.props.username;\n            if (!this.props.authenticated) {\n                const ip = await axios.get('ip');\n                username = ip.data;\n            }\n            const voteResponse = await axios.post('/castVote', {choice, id: this.props.pollId, username});\n            this.setState({\n                responseData: voteResponse.data,\n                submittedVote: true\n            });\n            this.props.updateParentState({pollMenuNeedsUpdate: true});\n        } catch (e) {\n            alert(\"There was an error getting information to or from the server. Please check console for error.\");\n            console.log(e);\n        }\n\n    }\n\n    showChoiceBtns() {\n        const choices = this.state.pollData.choices.map(choice => <button className={\"choiceBtn\"} onClick={() => this.castVote(choice)}>{choice}</button>);\n        return(\n            <div className={\"userChoices\"}>\n                {choices}\n            </div>\n        );\n    }\n\n    showResults() {\n        const choiceCount = this.state.responseData.map(datum => {\n            const {choice, count} = datum;\n            return(<p>{choice}: {count} votes</p>)\n        });\n        return(\n            <div>\n                <h3>Results:</h3>\n                {choiceCount}\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>{this.state.pollData.question}</h2>\n                    {this.state.submittedVote ? this.showResults() : this.showChoiceBtns()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ShowPoll;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            email: \"\",\n            submitted: false,\n            errorMessage: \"\"\n        };\n        this.successMessage = \"Registered successfully, please check email for activation link.\";\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmit(e) {\n        const { username, password, email } = this.state;\n        axios.post('/register', {username, password, email})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                // problem with information (email already in use etc)\n                if (response.data !== this.successMessage) {\n                    return this.setState({errorMessage: response.data}, () => {\n                        setTimeout(() => {\n                            this.setState({errorMessage: \"\"});\n                        }, 5000);\n                    });\n                }\n                // Successful registration\n                this.setState({\n                    username: \"\",\n                    password: \"\",\n                    email: \"\",\n                    submitted: true,\n                    errorMessage: \"\",\n                });\n            })\n            .catch((response) => {\n                //handle error\n                alert(\"There was a problem connecting to the server, see console for more information\");\n                return console.log(response);\n            });\n        e.preventDefault();\n    }\n\n    registrationForm() {\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"spaceAround\">\n                    <p>Username:</p>\n                    <input\n                        onChange={this.handleChange}\n                        name=\"username\"\n                        type=\"text\"\n                        id=\"registeringUsername\"\n                        value={this.state.username}\n                        required\n                    />\n                </div>\n                <div className=\"spaceAround\">\n                    <p>Password:</p>\n                    <input\n                        onChange={this.handleChange}\n                        name=\"password\"\n                        type=\"password\"\n                        id=\"registeringPassword\"\n                        value={this.state.password}\n                        required\n                    />\n                </div>\n                <div className=\"spaceAround\">\n                    <p>Email:</p>\n                    <input\n                        onChange={this.handleChange}\n                        name=\"email\"\n                        type=\"email\"\n                        id=\"registeringEmail\"\n                        value={this.state.email}\n                        required\n                    />\n                </div>\n                <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\n                <p className={\"red\"}>{this.state.errorMessage}</p>\n            </form>\n        );\n    }\n\n    showSuccess() {\n        return(\n            <div>\n                <p>{this.successMessage}</p>\n                <p className={\"red\"}>You may need to check the spam folder.</p>\n                <p className={\"clickableText\"} onClick={() => {this.setState({submitted: false})}}>Back</p>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Register</h2>\n                    {this.state.submitted ? this.showSuccess() : this.registrationForm()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Register;","import React, {Component} from 'react';\nimport axios from \"axios\";\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            failedMessage: \"\"\n        };\n        // this.loginTimeout = null;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmit(e) {\n        this.props.updateParentState({attemptedLogin: true});\n        // this.loginTimeout = setTimeout(() => {\n        //\n        // }, 10000);\n        this.setState({failedMessage: \"\"});\n        const { username, password } = this.state;\n        axios.post('/login', {username, password})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem after connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                if (response.data.loggedIn) {\n                    // update log in status of parent\n                    this.props.updateParentState({\n                        authenticated: true,\n                        username: response.data.message\n                    });\n                    // Must clear fields for cyber-security!\n                    this.setState({\n                        username: \"\",\n                        password: \"\"\n                    });\n                    // close widget after 2 seconds\n                    setTimeout(this.props.close, 2000);\n                } else {\n                    this.setState({failedMessage: response.data.message});\n                    this.props.updateParentState({attemptedLogin: false});\n                }\n            })\n            .catch((response) => {\n                //handle error\n                console.log(response);\n                this.setState({\n                    failedMessage: \"Trouble connecting to server. Potentially from loss of internet connection. See console for more details\"\n                });\n                this.props.updateParentState({attemptedLogin: false});\n            });\n        e.preventDefault();\n    }\n\n    attemptedLogin() {\n        const message = this.props.authenticated ? \"You have logged in successfully!\" : \"Please wait...\";\n        return(\n            <div>\n                <p>{message}</p>\n            </div>\n        );\n    }\n\n    loginForm() {\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"spaceAround\">\n                        <p>Username:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"username\"\n                            type=\"text\"\n                            id=\"loginUsername\"\n                            value={this.state.username}\n                            required\n                        />\n                    </div>\n                    <div className=\"spaceAround\">\n                        <p>Password:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"password\"\n                            type=\"password\"\n                            id=\"loginPassword\"\n                            value={this.state.password}\n                            required\n                        />\n                    </div>\n                    <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\n                </form>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Login</h2>\n                    {this.props.attemptedLogin ? this.attemptedLogin() : this.loginForm()}\n                    <p className={\"red\"}>{this.state.failedMessage}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;","// Dependencies\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './stylesheets/App.css';\n// import VotingImg from './images/voting.jpg';\n\n// My Modules\nimport AuthenticationSegment from './components/AuthenticationSegment';\nimport MainMenu from './components/MainMenu';\nimport Intro from './components/Intro';\nimport PollMenu from './components/PollMenu';\nimport CreateNewPoll from './components/CreateNewPoll';\nimport ShowPoll from './components/ShowPoll';\nimport Register from './components/Register';\nimport Login from './components/Login';\n\n// Global variables for string-references of widgets, for consistency and efficiency in development\nconst INTRO = \"Intro\";\nconst MAIN_MENU = \"Main Menu\";\nconst POLL_MENU = \"Poll Menu\";\nconst REGISTER = \"Register\";\nconst LOGIN = \"Login\";\nconst CREATE_NEW_POLL = \"Create New Poll\";\nconst SHOW_POLL = \"Show Poll\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            authenticated: false,\n            username: \"\",\n            visibleWidgets: [INTRO, POLL_MENU],\n            attemptedLogin: false,\n            showingPollId: \"\",\n            pollMenuNeedsUpdate: false\n        };\n        this.closeWidget = this.closeWidget.bind(this);\n        this.showWidget = this.showWidget.bind(this);\n        this.updateParentState = this.updateParentState.bind(this);\n        this.bringMenuToFront = this.bringMenuToFront.bind(this);\n    }\n\n    componentDidMount() {\n        // Check if user is already logged in to display components accordingly (i.e. Welcome message)\n        axios.get('/whoami')\n            .then(res => {\n                if (res.data) {\n                    this.setState({authenticated: true, username: res.data});\n                }\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    updateParentState(stateObject) {\n        this.setState(stateObject);\n    }\n\n    closeWidget(widgetName) {\n        this.setState({visibleWidgets: this.state.visibleWidgets.filter(widget => widget !== widgetName)});\n    }\n\n    showWidget(widgetName) {\n        const containsMenu = this.state.visibleWidgets.includes(MAIN_MENU);\n        const otherWidgets = this.state.visibleWidgets.filter(widget => widget !== MAIN_MENU);\n        const updateArray = [widgetName, ...otherWidgets];\n        if (containsMenu) updateArray.unshift(MAIN_MENU);\n        this.setState({visibleWidgets: updateArray});\n    }\n\n    bringMenuToFront() {\n        const otherWidgets = this.state.visibleWidgets.filter(widget => widget !== MAIN_MENU);\n        this.setState({visibleWidgets: [MAIN_MENU, ...otherWidgets]});\n    }\n\n    // componentDidUpdate() {\n    //     const widgets = document.getElementsByClassName('widget');\n    //     for (let i = 0; i < widgets.length; i++) {\n    //         const el = widgets[i];\n    //         const curOverflow = el.style.overflow;\n    //\n    //         if ( !curOverflow || curOverflow === \"visible\" )\n    //             el.style.overflow = \"hidden\";\n    //\n    //         let isOverflowing = el.clientWidth < el.scrollWidth\n    //             || el.clientHeight < el.scrollHeight;\n    //\n    //         el.style.overflowY = isOverflowing ? \"scroll\" : \"hidden\";\n    //     }\n    // }\n\n    render() {\n        // Everything in <main> is divided into 'widgets'\n        // Each widget displays according to a particular order, if at all\n        // The two function expressions below determine whether it is showing, and what order it is if so\n        // These are passed as props to each component, or 'widget'\n        const orderOf = widgetName => this.state.visibleWidgets.indexOf(widgetName);\n        const showing = widgetName => this.state.visibleWidgets.includes(widgetName);\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <p className={\"hamburgerIcon\"} onClick={() => { this.showWidget(MAIN_MENU) }}>&#9776;</p>\n                    <h1 id={\"mainTitle\"}>Voting App</h1>\n                    <AuthenticationSegment\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        showRegister={() => this.showWidget(REGISTER)}\n                        showLogin={() => this.showWidget(LOGIN)}\n                        updateParentState={this.updateParentState}\n                    />\n                </header>\n                <main>\n                    <MainMenu\n                        widgets={[INTRO, POLL_MENU, CREATE_NEW_POLL, REGISTER, LOGIN]}\n                        order={orderOf(MAIN_MENU)}\n                        showing={showing(MAIN_MENU)}\n                        close={() => {this.closeWidget(MAIN_MENU)}}\n                        visibleWidgets={this.state.visibleWidgets}\n                        showWidget={this.showWidget}\n                        closeWidget={this.closeWidget}\n                        bringMenuToFront={this.bringMenuToFront}\n                        authenticated={this.state.authenticated}\n                        id={MAIN_MENU.replace(/\\s/g, \"\")}\n                    />\n                    <Intro\n                        order={orderOf(INTRO)}\n                        showing={showing(INTRO)}\n                        close={() => {this.closeWidget(INTRO)}}\n                        id={INTRO.replace(/\\s/g, \"\")}\n                    />\n                    <PollMenu\n                        order={orderOf(POLL_MENU)}\n                        showing={showing(POLL_MENU)}\n                        close={() => {this.closeWidget(POLL_MENU)}}\n                        showPoll={() => this.showWidget(SHOW_POLL)}\n                        updateParentState={this.updateParentState}\n                        needsUpdate={this.state.pollMenuNeedsUpdate}\n                        id={POLL_MENU.replace(/\\s/g, \"\")}\n                    />\n                    <CreateNewPoll\n                        order={orderOf(CREATE_NEW_POLL)}\n                        showing={showing(CREATE_NEW_POLL)}\n                        close={() => {this.closeWidget(CREATE_NEW_POLL)}}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        id={CREATE_NEW_POLL.replace(/\\s/g, \"\")}\n                    />\n                    <ShowPoll\n                        order={orderOf(SHOW_POLL)}\n                        showing={showing(SHOW_POLL)}\n                        close={() => {this.closeWidget(SHOW_POLL)}}\n                        pollId={this.state.showingPollId}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        id={SHOW_POLL.replace(/\\s/g, \"\")}\n                    />\n                    <Register\n                        order={orderOf(REGISTER)}\n                        showing={showing(REGISTER)}\n                        close={() => {this.closeWidget(REGISTER)}}\n                        id={REGISTER.replace(/\\s/g, \"\")}\n                    />\n                    <Login\n                        order={orderOf(LOGIN)}\n                        showing={showing(LOGIN)}\n                        close={() => {this.closeWidget(LOGIN)}}\n                        authenticated={this.state.authenticated}\n                        attemptedLogin={this.state.attemptedLogin}\n                        updateParentState={this.updateParentState}\n                        id={LOGIN.replace(/\\s/g, \"\")}\n                    />\n                    <p className={\"noWidgetMsg\"} onClick={() => { this.showWidget(MAIN_MENU) }}>\n                        {this.state.visibleWidgets.length === 0 ? \"Click here or ☰ for the menu\" : \"\"}\n                    </p>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = (order, showing) => {\n    return {\n        order,\n        display: (showing ? \"block\" : \"none\"),\n        width: 400,\n        animation: `appear 1s ease-out ${order*100}ms forwards`\n    };\n};"],"sourceRoot":""}