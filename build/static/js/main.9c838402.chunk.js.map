{"version":3,"sources":["components/AuthenticationSegment.js","components/CloseWidgetBtn.js","components/MainMenu.js","components/Intro.js","components/PollMenu.js","components/MyPolls.js","components/CreateNewPoll.js","components/Chart.js","components/ShowPoll.js","components/Register.js","components/Login.js","App.js","serviceWorker.js","index.js","components/widgetStyle.js"],"names":["AuthenticationSegment","logout","axios","get","then","res","console","log","data","_this","props","updateParentState","authenticated","username","attemptedLogin","pollMenuNeedsUpdate","catch","e","alert","react_default","a","createElement","className","onClick","this","showRegister","showLogin","notAuthenticated","Component","CloseWidgetBtn","close","MainMenu","visibleOptions","Object","toConsumableArray","widgets","listItems","filter","option","map","widget","widgetShowing","visibleWidgets","includes","liStyle","textShadow","cursor","toggleWidget","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","closeWidget","showWidget","bringMenuToFront","stop","apply","arguments","key","style","id","widgetStyle","order","showing","components_CloseWidgetBtn","options","Intro","RECENT","PollMenu","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchQuery","list","sortBy","showList","bind","assertThisInitialized","handleChange","getPollList","listCall","forEach","poll","dateAdded","Date","lastVotedOn","setState","sortList","t0","_this2","length","regex","RegExp","test","question","showIfVoted","display","userHasVoted","showingPollId","showPoll","category","sort","b","defineProperty","target","name","value","needsUpdate","_this3","showingToolTip","onChange","type","MyPolls","errorMessage","polls","previousUsername","getMyPolls","post","error","message","_id","CreateNewPoll","choices","submitAttempted","submitSucceeded","handleSubmit","addNewChoice","author","response","status","preventDefault","width","height","choice","index","arrayForUpdate","slice","required","splice","blankSpace","concat","_this4","onSubmit","showSubmitStatus","showForm","Chart","createChart","choiceArr","dataForPie","responseData","datum","count","chart","document","getElementById","innerHTML","radius","Math","min","svg","d3","append","attr","color","domain","range","data_ready","d","pie","arc","innerRadius","outerRadius","outerArc","selectAll","enter","posA","centroid","posB","posC","midangle","startAngle","endAngle","PI","text","pos","ShowPoll","pollId","submittedVote","pollData","justLooking","voteResponse","getPollData","pollCall","_context2","ip","_context3","castVote","choiceCount","push","components_Chart","showResults","showChoiceBtns","Register","password","email","submitted","successMessage","_this$state","setTimeout","showSuccess","registrationForm","Login","failedMessage","loggedIn","closeRegister","loginForm","INTRO","MAIN_MENU","POLL_MENU","App","stateObject","widgetName","otherWidgets","updateArray","unshift","window","scrollTo","orderOf","indexOf","showMenu","components_AuthenticationSegment","components_MainMenu","replace","components_Intro","components_PollMenu","components_MyPolls","components_CreateNewPoll","components_ShowPoll","components_Register","components_Login","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister","module","exports","animation"],"mappings":"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","file":"static/js/main.9c838402.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\n\nclass AuthenticationSegment extends Component {\n    logout = () => {\n        axios.get('/logout')\n            .then(res => {\n                console.log(res.data);\n                // this.props.updateAuthenticationStatus(false, \"\");\n                this.props.updateParentState({\n                    authenticated: false,\n                    username: \"\",\n                    attemptedLogin: false,\n                    pollMenuNeedsUpdate: true\n                });\n            })\n            .catch(e => {\n                alert(\"There was an error connecting, please check console for the error\");\n                console.log(e);\n            });\n    };\n\n    notAuthenticated() {\n        return(\n            <div className=\"authenticationLinks\">\n                <p className=\"clickableText\" onClick={this.props.showRegister}>Register</p>\n                <p> || </p>\n                <p className=\"clickableText\" onClick={this.props.showLogin}>Log In</p>\n            </div>\n        );\n    }\n\n    authenticated() {\n        return(\n            <div>\n                <p>Welcome {this.props.username}</p>\n                <p className=\"clickableText\" onClick={this.logout}>Sign Out</p>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.authenticated ? this.authenticated() : this.notAuthenticated()}\n            </div>\n        );\n    }\n}\n\nexport default AuthenticationSegment;","import React, {Component} from 'react';\n\nclass CloseWidgetBtn extends Component {\n    render() {\n        return (\n            <div className={\"closeWidgetBtn\"}>\n                <p onClick={this.props.close} className={\"innerX\"}>X</p>\n            </div>\n        );\n    }\n}\n\nexport default CloseWidgetBtn;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass MainMenu extends Component {\n    options() {\n        let visibleOptions = [...this.props.widgets];\n        if (this.props.authenticated) {\n            visibleOptions = visibleOptions.filter(option => option !== \"Login\" && option !== \"Register\");\n        } else {\n            visibleOptions = visibleOptions.filter(option => option !== \"My Polls\");\n        }\n        let listItems = visibleOptions.map(widget => {\n            const widgetShowing = this.props.visibleWidgets.includes(widget);\n            const liStyle = {\n                textShadow: widgetShowing ? \"0 0 2px gold\" : \"none\",\n                cursor: \"pointer\"\n            };\n            const toggleWidget = async () => {\n                await widgetShowing ?\n                    this.props.closeWidget(widget) :\n                    this.props.showWidget(widget);\n                this.props.bringMenuToFront();\n            };\n            return (\n                <li key={widget} onClick={toggleWidget} style={liStyle}>{widget}</li>\n            );\n        });\n        return(\n            <ul className={\"mainMenuOptions\"}>\n                {listItems}\n            </ul>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Main Menu</h2>\n                    {this.options()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MainMenu;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Intro extends Component {\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Welcome to Cross Voting</h2>\n                    <p>Here you can make your own polls, and have your friends vote on them.</p>\n                    <p>You can do all this without making an account, but if you want your poll to be associated with your username, you will need to register.</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Intro;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\n// Strings stored in global variables for consistency and production ease. Used in sorting function.\nconst RECENT = 'dateAdded';\nconst LAST_VOTE = 'lastVotedOn';\nconst MOST_VOTES = 'voteCount';\n\nclass PollMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchQuery: \"\",\n            list: [],\n            sortBy: RECENT\n        };\n        this.showList = this.showList.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.getPollList();\n    }\n\n    async getPollList() {\n        try {\n            const listCall = await axios.get('pollList');\n            const list = listCall.data;\n            list.forEach(poll => {\n               poll.dateAdded = new Date(poll.dateAdded);\n               poll.lastVotedOn = new Date(poll.lastVotedOn);\n            });\n            await this.setState({list});\n            this.sortList(this.state.sortBy);\n        } catch (e) {\n            alert('There was an error getting polls from the server, see console for error.');\n            console.log(e);\n        }\n    }\n\n    showList() {\n        let list = this.state.list;\n        if (this.state.searchQuery.length > 0) {\n            try {\n                const regex = new RegExp(this.state.searchQuery, 'gi');\n                list = list.filter(poll => regex.test(poll.question));\n            } catch (e) {\n                console.log('invalid regex');\n            }\n        }\n        return list.map(poll => {\n            const showIfVoted = {\n                display: poll.userHasVoted ? \"flex\" : \"none\"\n            };\n            return(\n                <div className={'flexCenter'}>\n                    <p className={\"pollMenuChoice\"} onClick={() => {\n                        this.props.updateParentState({showingPollId: poll.id});\n                        this.props.showPoll();\n                    }}>{poll.question}</p>\n                    <p\n                        // onMouseOver={this.setState({showingToolTip: true})}\n                        // onMouseOut={this.setState({showingToolTip: false})}\n                        style={showIfVoted}\n                        className={'votedSign'}\n                    >V</p>\n                </div>\n            );\n        })\n    }\n\n    sortList(category) {\n        const list = this.state.list.sort((a,b) => b[category] - a[category]);\n        this.setState({list, sortBy: category}, this.showList);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    componentDidUpdate() {\n        if (this.props.needsUpdate) {\n            this.props.updateParentState({pollMenuNeedsUpdate: false});\n            this.getPollList();\n        }\n    }\n\n    render() {\n        const toolTipShowing = {\n            display: this.state.showingToolTip ? \"flex\" : \"none\"\n        };\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Poll Menu</h2>\n                    <div>\n                        <input\n                            onChange={this.handleChange}\n                            name='searchQuery'\n                            value={this.state.searchQuery}\n                            className={'searchBar'}\n                            type='text'\n                        />\n                        <div className=\"sortBy\">\n                            <p onClick={() => { this.sortList(RECENT) }} className={'clickableText'}>Recently made</p>\n                            <p onClick={() => { this.sortList(LAST_VOTE) }} className={'clickableText'}>Last voted on</p>\n                            <p onClick={() => { this.sortList(MOST_VOTES) }} className={'clickableText'}>Most votes</p>\n                        </div>\n                        {/*<span aria-label={'magnifying glass search icon'} role={'img'} className=\"searchIcon\">🔍</span>*/}\n                        {this.showList()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PollMenu;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass MyPolls extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            errorMessage: \"\",\n            polls: [],\n            previousUsername: \"\"\n        }\n    }\n\n    componentDidMount() {\n        this.getMyPolls();\n    }\n\n    componentDidUpdate() {\n        if (this.state.previousUsername !== this.props.username) {\n            this.setState({previousUsername: this.props.username}, this.getMyPolls);\n        }\n    }\n\n    async getMyPolls() {\n        if (!this.props.authenticated) return;\n        try {\n            const res = await axios.post('/myPolls', {username: this.props.username});\n            const data = res.data;\n            if (data.error) {\n                console.log(data.error);\n                return this.setState({errorMessage: data.message});\n            }\n            // success\n            this.setState({polls: data.polls, errorMessage: \"\"});\n        } catch (e) {\n            this.setState({errorMessage: \"There was a problem connecting, see console for the error\"});\n            console.log(e);\n        }\n    }\n\n    showList() {\n        if (!this.props.authenticated) return (<p className={'red'}>Please log in to see poll list</p>);\n        return this.state.polls.map(poll => {\n            const choosePoll = () => {\n                this.props.updateParentState({showingPollId: poll._id});\n                this.props.showPoll();\n            };\n            return(\n                <p className={'clickableText'} onClick={choosePoll}>{poll.question}</p>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>My Polls</h2>\n                    {this.showList()}\n                    <p className=\"red\">{this.state.errorMessage}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MyPolls;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\nimport axios from \"axios\";\n\nclass CreateNewPoll extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            question: \"\",\n            choices: [\"\", \"\"],\n            submitAttempted: false,\n            submitSucceeded: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.addNewChoice = this.addNewChoice.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    async handleSubmit(e) {\n        await this.setState({submitAttempted: true});\n        const author = this.props.username;\n        const { question, choices } = this.state;\n        axios.post('/poll', {question, choices, author})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem after connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                this.setState({\n                    question: \"\",\n                    choices: [\"\", \"\"],\n                    submitSucceeded: true\n                });\n                this.props.updateParentState({pollMenuNeedsUpdate: true});\n            })\n            .catch((response) => {\n                //handle error\n                this.setState({\n                    submitSucceeded: false,\n                    submitAttempted: false\n                });\n                console.log(response);\n            });\n        e.preventDefault();\n    }\n\n    blankSpace() {\n        return (\n            <div style={{width: 30, height: 30}}> </div>\n        );\n    }\n\n    choices() {\n        // For each choice, generate an input field with label\n        return this.state.choices.map((choice, index) => {\n            const changeChoice = e => {\n                const arrayForUpdate = this.state.choices.slice();\n                arrayForUpdate[index] = e.target.value;\n                this.setState({choices: arrayForUpdate});\n            };\n            const deleteChoice = () => {\n                let arrayForUpdate = this.state.choices.slice();\n                arrayForUpdate.splice(index, 1);\n                this.setState({choices: arrayForUpdate});\n\n            };\n            return(\n                <div key={\"choice_\"+index} className=\"spaceAround\">\n                    <p>Choice {index+1}: </p>\n                    <input onChange={changeChoice} value={this.state.choices[index]} type=\"text\" required/>\n                    {\n                        // If there's more than 2 choices, you can delete one\n                        this.state.choices.length > 2 ?\n                        <p onClick={deleteChoice} className={\"innerX\"}>X</p> :\n                        this.blankSpace()\n                    }\n                </div>\n            )\n        });\n    }\n\n    addNewChoice(e) {\n        this.setState({choices: [...this.state.choices, \"\"]});\n        e.preventDefault();\n    }\n\n    showSubmitStatus() {\n        const message = this.state.submitSucceeded ? \"Poll successfully submitted\" : \"Sending...\";\n        const goBack = () => {\n            this.setState({\n                submitAttempted: false,\n                submitSucceeded: false\n            });\n        };\n        return(\n            <div>\n                <p className={\"red\"}>{message}</p>\n                <p onClick={goBack} className=\"clickableText\">Back</p>\n            </div>\n        );\n    }\n\n    showForm() {\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"spaceAround\">\n                    <p>Question: </p>\n                    <input name={\"question\"} onChange={this.handleChange} type=\"text\" value={this.state.question} required/>\n                    {this.blankSpace()}\n                </div>\n                {this.choices()}\n                <button className={\"addNewChoiceBtn\"} onClick={this.addNewChoice}>Add New Choice</button>\n                <br/>\n                <input className={\"submitBtn\"} type=\"submit\" value=\"Submit Poll\"/>\n            </form>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Create New Poll</h2>\n                    {this.state.submitAttempted ? this.showSubmitStatus() : this.showForm()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CreateNewPoll;","import React, {Component} from 'react';\nimport * as d3 from 'd3';\n\nclass Chart extends Component {\n    componentDidMount() {\n        this.createChart();\n    }\n\n    createChart() {\n        const choiceArr = this.props.choiceArr;\n        const dataForPie = {};\n        this.props.responseData.forEach(datum => {\n            if (datum.count) dataForPie[datum.choice] = datum.count;\n        });\n        const chart = document.getElementById('donut_chart');\n        if (chart) chart.innerHTML = \"\";\n        const width = 350;\n        const height = 250;\n        const margin = 40;\n\n        // The radius of the pieplot is half the width or half the height (smallest one). I substract a bit of margin.\n        const radius = Math.min(width, height) / 2 - margin;\n\n        const svg = d3.select(\"#donut_chart\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n        const data = dataForPie;\n\n        // Colour scale\n        const color = d3.scaleOrdinal()\n            .domain(choiceArr)\n            .range(d3.schemeAccent);\n\n        // Create the pie chart\n        const pie = d3.pie()\n            .sort(null) // Do not sort group by size\n            .value(d => d.value);\n        const data_ready = pie(d3.entries(data));\n\n        // The arc generator\n        const arc = d3.arc()\n            .innerRadius(radius * 0.4)         // This is the size of the donut hole\n            .outerRadius(radius * 0.8);\n\n        // Another arc that won't be drawn. Just for labels positionning\n        const outerArc = d3.arc()\n            .innerRadius(radius * 0.9)\n            .outerRadius(radius * 0.9);\n\n        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n        svg\n            .selectAll('allSlices')\n            .data(data_ready)\n            .enter()\n            .append('path')\n            .attr('d', arc)\n            .attr('fill', d => color(d.data.key))\n            .attr(\"stroke\", \"white\")\n            .style(\"stroke-width\", \"2px\")\n            .style(\"opacity\", 0.7);\n\n        // Add the polylines between chart and labels:\n        svg\n            .selectAll('allPolylines')\n            .data(data_ready)\n            .enter()\n            .append('polyline')\n            .attr(\"stroke\", \"black\")\n            .style(\"fill\", \"none\")\n            .attr(\"stroke-width\", 1)\n            .attr('points', d => {\n                const posA = arc.centroid(d); // line insertion in the slice\n                const posB = outerArc.centroid(d); // line break: we use the other arc generator that has been built only for that\n                const posC = outerArc.centroid(d); // Label position = almost the same as posB\n                const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2; // we need the angle to see if the X position will be at the extreme right or extreme left\n                posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n                return [posA, posB, posC];\n            });\n\n        // Add the polylines between chart and labels:\n        svg\n            .selectAll('allLabels')\n            .data(data_ready)\n            .enter()\n            .append('text')\n            .text( d => d.data.key )\n            .attr('transform', d => {\n                const pos = outerArc.centroid(d);\n                const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n                pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n                return 'translate(' + pos + ')';\n            })\n            .style('text-anchor', d => {\n                const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n                return (midangle < Math.PI ? 'start' : 'end')\n            });\n    }\n\n    render() {\n        return (\n            <div id=\"donut_chart\"/>\n        );\n    }\n}\n\nexport default Chart;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\nimport Chart from './Chart';\n\nclass ShowPoll extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pollId: this.props.pollId,\n            submittedVote: false,\n            pollData: {\n                question: \"\",\n                choices: [],\n                author: \"\"\n            },\n            responseData: []\n        }\n    }\n\n    // Refresh widget if user has chosen to display new poll\n    async componentDidUpdate() {\n        if (this.props.pollId !== this.state.pollId) {\n            const voteResponse = await axios.post('/castVote', {\n                choice: null,\n                id: this.props.pollId,\n                username: this.props.username,\n                justLooking: true\n            });\n            this.setState({\n                pollId: this.props.pollId,\n                responseData: voteResponse.data,\n                submittedVote: false\n            }, this.getPollData);\n        }\n    }\n\n    async getPollData() {\n        try {\n            const pollCall = await axios.get('pollData/' + this.props.pollId);\n            const pollData = pollCall.data;\n            this.setState({pollData});\n        } catch (e) {\n            alert(\"There was an error getting the poll data from the server\");\n            console.log(e);\n        }\n    }\n\n    async castVote(choice) {\n        try {\n            let username = this.props.username;\n            if (!this.props.authenticated) {\n                const ip = await axios.get('ip');\n                username = ip.data;\n            }\n            const voteResponse = await axios.post('/castVote', {choice, id: this.props.pollId, username, justLooking: false});\n            this.setState({\n                responseData: voteResponse.data,\n                submittedVote: true\n            });\n            this.props.updateParentState({pollMenuNeedsUpdate: true});\n        } catch (e) {\n            alert(\"There was an error getting information to or from the server. Please check console for error.\");\n            console.log(e);\n        }\n\n    }\n\n    showChoiceBtns() {\n        let choices = this.state.pollData ?\n            this.state.pollData.choices.map(choice =>\n                <button\n                    className={\"choiceBtn\"}\n                    onClick={() => this.castVote(choice)}>\n                    {choice}\n                </button>) :\n            \"Could not connect to server.\";\n        const seeResults = () => {\n            this.setState({submittedVote: true});\n        };\n        return(\n            <div className={\"userChoices\"}>\n                {choices}\n                <p className={'clickableText navigationText'} onClick={seeResults}>See Results</p>\n            </div>\n        );\n    }\n\n    showResults() {\n        let choiceArr = [];\n        const choiceCount = this.state.responseData.map(datum => {\n            const {choice, count} = datum;\n            if (count > 0) choiceArr.push(choice);\n            return(<p>{choice}: {count} votes</p>)\n        });\n        const changeVote = () => {\n            this.setState({submittedVote: false});\n        };\n        return(\n            <div>\n                <h3>Results:</h3>\n                <Chart choiceArr={choiceArr} responseData={this.state.responseData}/>\n                {choiceCount}\n                <p className={'clickableText navigationText'} onClick={changeVote}>Change Vote</p>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>{this.state.pollData.question}</h2>\n                    {this.state.submittedVote ? this.showResults() : this.showChoiceBtns()}\n                    <p>Created By: {this.state.pollData.author || \"Anonymous\"}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ShowPoll;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            email: \"\",\n            submitted: false,\n            errorMessage: \"\"\n        };\n        this.successMessage = \"Registered successfully, please check email for activation link.\";\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmit(e) {\n        const { username, password, email } = this.state;\n        axios.post('/register', {username, password, email})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                // problem with information (email already in use etc)\n                if (response.data !== this.successMessage) {\n                    return this.setState({errorMessage: response.data}, () => {\n                        setTimeout(() => {\n                            this.setState({errorMessage: \"\"});\n                        }, 5000);\n                    });\n                }\n                // Successful registration\n                this.setState({\n                    username: \"\",\n                    password: \"\",\n                    email: \"\",\n                    submitted: true,\n                    errorMessage: \"\",\n                });\n            })\n            .catch((response) => {\n                //handle error\n                alert(\"There was a problem connecting to the server, see console for more information\");\n                return console.log(response);\n            });\n        e.preventDefault();\n    }\n\n    registrationForm() {\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"spaceAround\">\n                    <p>Username:</p>\n                    <input\n                        onChange={this.handleChange}\n                        name=\"username\"\n                        type=\"text\"\n                        id=\"registeringUsername\"\n                        value={this.state.username}\n                        required\n                    />\n                </div>\n                <div className=\"spaceAround\">\n                    <p>Password:</p>\n                    <input\n                        onChange={this.handleChange}\n                        name=\"password\"\n                        type=\"password\"\n                        id=\"registeringPassword\"\n                        value={this.state.password}\n                        required\n                    />\n                </div>\n                <div className=\"spaceAround\">\n                    <p>Email:</p>\n                    <input\n                        onChange={this.handleChange}\n                        name=\"email\"\n                        type=\"email\"\n                        id=\"registeringEmail\"\n                        value={this.state.email}\n                        required\n                    />\n                </div>\n                <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\n                <p className={\"red\"}>{this.state.errorMessage}</p>\n            </form>\n        );\n    }\n\n    showSuccess() {\n        return(\n            <div>\n                <p>{this.successMessage}</p>\n                <p className={\"red\"}>You may need to check the spam folder.</p>\n                <p className={\"clickableText\"} onClick={() => {this.setState({submitted: false})}}>Back</p>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Register</h2>\n                    {this.state.submitted ? this.showSuccess() : this.registrationForm()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Register;","import React, {Component} from 'react';\nimport axios from \"axios\";\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            failedMessage: \"\"\n        };\n        // this.loginTimeout = null;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmit(e) {\n        this.props.updateParentState({attemptedLogin: true});\n        // this.loginTimeout = setTimeout(() => {\n        //\n        // }, 10000);\n        this.setState({failedMessage: \"\"});\n        const { username, password } = this.state;\n        axios.post('/login', {username, password})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem after connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                if (response.data.loggedIn) {\n                    // update log in status of parent\n                    this.props.updateParentState({\n                        authenticated: true,\n                        username: response.data.message,\n                        pollMenuNeedsUpdate: true\n                    });\n                    // Must clear fields for cyber-security!\n                    this.setState({\n                        username: \"\",\n                        password: \"\"\n                    });\n                    // close widget after 2 seconds\n                    this.props.closeRegister();\n                    setTimeout(this.props.close, 2000);\n                } else {\n                    this.setState({failedMessage: response.data.message});\n                    this.props.updateParentState({attemptedLogin: false});\n                }\n            })\n            .catch((response) => {\n                //handle error\n                console.log(response);\n                this.setState({\n                    failedMessage: \"Trouble connecting to server. Potentially from loss of internet connection. See console for more details\"\n                });\n                this.props.updateParentState({attemptedLogin: false});\n            });\n        e.preventDefault();\n    }\n\n    attemptedLogin() {\n        const message = this.props.authenticated ? \"You have logged in successfully!\" : \"Please wait...\";\n        return(\n            <div>\n                <p>{message}</p>\n            </div>\n        );\n    }\n\n    loginForm() {\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"spaceAround\">\n                        <p>Username:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"username\"\n                            type=\"text\"\n                            id=\"loginUsername\"\n                            value={this.state.username}\n                            required\n                        />\n                    </div>\n                    <div className=\"spaceAround\">\n                        <p>Password:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"password\"\n                            type=\"password\"\n                            id=\"loginPassword\"\n                            value={this.state.password}\n                            required\n                        />\n                    </div>\n                    <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\n                </form>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Login</h2>\n                    {this.props.attemptedLogin ? this.attemptedLogin() : this.loginForm()}\n                    <p className={\"red\"}>{this.state.failedMessage}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;","// Dependencies\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './stylesheets/App.css';\n// import VotingImg from './images/voting.jpg';\n\n// My Modules\nimport AuthenticationSegment from './components/AuthenticationSegment';\nimport MainMenu from './components/MainMenu';\nimport Intro from './components/Intro';\nimport PollMenu from './components/PollMenu';\nimport MyPolls from './components/MyPolls';\nimport CreateNewPoll from './components/CreateNewPoll';\nimport ShowPoll from './components/ShowPoll';\nimport Register from './components/Register';\nimport Login from './components/Login';\n\n// Global variables for string-references of widgets, for consistency and efficiency in development\nconst INTRO = \"Intro\";\nconst MAIN_MENU = \"Main Menu\";\nconst POLL_MENU = \"Poll Menu\";\nconst MY_POLLS = \"My Polls\";\nconst REGISTER = \"Register\";\nconst LOGIN = \"Login\";\nconst CREATE_NEW_POLL = \"Create New Poll\";\nconst SHOW_POLL = \"Show Poll\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            authenticated: false,\n            username: \"\",\n            visibleWidgets: [INTRO, POLL_MENU],\n            attemptedLogin: false,\n            showingPollId: \"\",\n            pollMenuNeedsUpdate: false\n        };\n        this.closeWidget = this.closeWidget.bind(this);\n        this.showWidget = this.showWidget.bind(this);\n        this.updateParentState = this.updateParentState.bind(this);\n        this.bringMenuToFront = this.bringMenuToFront.bind(this);\n    }\n\n    componentDidMount() {\n        // Check if user is already logged in to display components accordingly (i.e. Welcome message)\n        axios.get('/whoami')\n            .then(res => {\n                if (res.data) {\n                    this.setState({authenticated: true, username: res.data});\n                }\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    updateParentState(stateObject) {\n        this.setState(stateObject);\n    }\n\n    closeWidget(widgetName) {\n        this.setState({visibleWidgets: this.state.visibleWidgets.filter(widget => widget !== widgetName)});\n    }\n\n    showWidget(widgetName) {\n        const otherWidgets = this.state.visibleWidgets.filter(widget => widget !== MAIN_MENU);\n        const updateArray = [widgetName, ...otherWidgets];\n        // put main menu to left if open\n        const containsMenu = this.state.visibleWidgets.includes(MAIN_MENU);\n        if (containsMenu) updateArray.unshift(MAIN_MENU);\n        this.setState({visibleWidgets: updateArray});\n    }\n\n    showMenu() {\n        window.scrollTo(0, 0);\n        this.showWidget(MAIN_MENU);\n    }\n\n    bringMenuToFront() {\n        const otherWidgets = this.state.visibleWidgets.filter(widget => widget !== MAIN_MENU);\n        this.setState({visibleWidgets: [MAIN_MENU, ...otherWidgets]});\n    }\n\n    render() {\n        // Everything in <main> is divided into 'widgets'\n        // Each widget displays according to a particular order, if at all\n        // The two function expressions below determine whether it is showing, and what order it is if so\n        // These are passed as props to each component, or 'widget'\n        const orderOf = widgetName => this.state.visibleWidgets.indexOf(widgetName);\n        const showing = widgetName => this.state.visibleWidgets.includes(widgetName);\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <p className={\"hamburgerIcon\"} onClick={() => { this.showMenu() }}>&#9776;</p>\n                    <h1 id={\"mainTitle\"}>Voting App</h1>\n                    <AuthenticationSegment\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        showRegister={() => this.showWidget(REGISTER)}\n                        showLogin={() => this.showWidget(LOGIN)}\n                        updateParentState={this.updateParentState}\n                    />\n                </header>\n                <main>\n                    <MainMenu\n                        widgets={[INTRO, POLL_MENU, MY_POLLS, CREATE_NEW_POLL, REGISTER, LOGIN]}\n                        order={orderOf(MAIN_MENU)}\n                        showing={showing(MAIN_MENU)}\n                        close={() => {this.closeWidget(MAIN_MENU)}}\n                        visibleWidgets={this.state.visibleWidgets}\n                        showWidget={this.showWidget}\n                        closeWidget={this.closeWidget}\n                        bringMenuToFront={this.bringMenuToFront}\n                        authenticated={this.state.authenticated}\n                        id={MAIN_MENU.replace(/\\s/g, \"\")}\n                    />\n                    <Intro\n                        order={orderOf(INTRO)}\n                        showing={showing(INTRO)}\n                        close={() => {this.closeWidget(INTRO)}}\n                        id={INTRO.replace(/\\s/g, \"\")}\n                    />\n                    <PollMenu\n                        order={orderOf(POLL_MENU)}\n                        showing={showing(POLL_MENU)}\n                        close={() => {this.closeWidget(POLL_MENU)}}\n                        showPoll={() => this.showWidget(SHOW_POLL)}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        needsUpdate={this.state.pollMenuNeedsUpdate}\n                        id={POLL_MENU.replace(/\\s/g, \"\")}\n                    />\n                    <MyPolls\n                        order={orderOf(MY_POLLS)}\n                        showing={showing(MY_POLLS)}\n                        close={() => {this.closeWidget(MY_POLLS)}}\n                        showPoll={() => this.showWidget(SHOW_POLL)}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        id={MY_POLLS.replace(/\\s/g, \"\")}\n                    />\n                    <CreateNewPoll\n                        order={orderOf(CREATE_NEW_POLL)}\n                        showing={showing(CREATE_NEW_POLL)}\n                        close={() => {this.closeWidget(CREATE_NEW_POLL)}}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        id={CREATE_NEW_POLL.replace(/\\s/g, \"\")}\n                    />\n                    <ShowPoll\n                        order={orderOf(SHOW_POLL)}\n                        showing={showing(SHOW_POLL)}\n                        close={() => {this.closeWidget(SHOW_POLL)}}\n                        pollId={this.state.showingPollId}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        id={SHOW_POLL.replace(/\\s/g, \"\")}\n                    />\n                    <Register\n                        order={orderOf(REGISTER)}\n                        showing={showing(REGISTER)}\n                        close={() => {this.closeWidget(REGISTER)}}\n                        authenticated={this.state.authenticated}\n                        id={REGISTER.replace(/\\s/g, \"\")}\n                    />\n                    <Login\n                        order={orderOf(LOGIN)}\n                        showing={showing(LOGIN)}\n                        close={() => {this.closeWidget(LOGIN)}}\n                        closeRegister={() => {this.closeWidget(REGISTER)}}\n                        authenticated={this.state.authenticated}\n                        attemptedLogin={this.state.attemptedLogin}\n                        updateParentState={this.updateParentState}\n                        id={LOGIN.replace(/\\s/g, \"\")}\n                    />\n                    <p className={\"noWidgetMsg\"} onClick={() => { this.showWidget(MAIN_MENU) }}>\n                        {this.state.visibleWidgets.length === 0 ? \"Click here or ☰ for the menu\" : \"\"}\n                    </p>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = (order, showing) => {\n    return {\n        order,\n        display: (showing ? \"block\" : \"none\"),\n        width: 400,\n        animation: `appear 1s ease-out ${order*100}ms forwards`\n    };\n};"],"sourceRoot":""}