{"version":3,"sources":["AuthenticationSegment.js","Intro.js","PollMenu.js","App.js","serviceWorker.js","index.js","voting.jpg"],"names":["AuthenticationSegment","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showRegister","showLogin","react_default","a","createElement","className","username","authenticated","notAuthenticated","Component","Intro","widgetStyle","order","display","showing","width","animation","concat","style","PollMenu","INTRO","POLLMENU","App","visibleWidgets","_this2","orderOf","widgetName","indexOf","includes","src","VotingImg","alt","id","src_AuthenticationSegment","src_Intro","src_PollMenu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b8704a5d.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass AuthenticationSegment extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showRegister: false,\n            showLogin: false\n        };\n    }\n\n    notAuthenticated() {\n        return(\n            <div className=\"authenticationLinks\">\n                <p className=\"clickableText\">Register</p>\n                <p> || </p>\n                <p className=\"clickableText\">Log In</p>\n            </div>\n        );\n    }\n\n    authenticated() {\n        return(\n            <div>\n                <p>Welcome {this.props.username}</p>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.authenticated ? this.authenticated() : this.notAuthenticated()}\n            </div>\n        );\n    }\n}\n\nexport default AuthenticationSegment;","import React, {Component} from 'react';\n\nclass Intro extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        const widgetStyle = {\n            order: this.props.order,\n            display: (this.props.showing ? \"block\" : \"none\"),\n            width: \"30vw\",\n            animation: `appear 1s ease-out ${this.props.order*100}ms forwards`\n        };\n        return (\n            <div className={\"widget\"} style={widgetStyle}>\n                <div className={\"closeWidgetBtn\"}>\n                    <div style={{width: 20}}>\n                        <p className={\"innerX\"}>X</p>\n                    </div>\n                </div>\n                <h2>Welcome to Cross Voting</h2>\n                <p>Here you can make your own polls, and have your very own link that you can send to all your friends.</p>\n                <p>You need to register if you want to create your own polls, but you can vote on other polls without an account.</p>\n                <p>Registering is super easy, you can do it with a couple clicks if you use your Facebook or Google account.</p>\n                <p>You can also register using traditional means too.</p>\n            </div>\n        );\n    }\n}\n\nexport default Intro;","import React, {Component} from 'react';\n\nclass PollMenu extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        const widgetStyle = {\n            order: this.props.order,\n            display: (this.props.showing ? \"block\" : \"none\"),\n            animation: `appear 1s ease-out ${this.props.order*200}ms forwards`\n        };\n        return (\n            <div className={\"widget\"} style={widgetStyle}>\n                <h2>Poll Menu</h2>\n            </div>\n        );\n    }\n}\n\nexport default PollMenu;","// Dependencies\nimport React, { Component } from 'react';\nimport './App.css';\nimport VotingImg from './voting.jpg';\n\n// My Modules\nimport AuthenticationSegment from './AuthenticationSegment';\nimport Intro from './Intro';\nimport PollMenu from './PollMenu';\n\n// Global variables for string-references of widgets, for consistency and efficiency in development\nconst INTRO = \"intro\";\nconst POLLMENU = \"pollMenu\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            authenticated: false,\n            username: \"\",\n            visibleWidgets: [INTRO, POLLMENU]\n        }\n    }\n\n    render() {\n        const orderOf = widgetName => this.state.visibleWidgets.indexOf(widgetName);\n        const showing = widgetName => this.state.visibleWidgets.includes(widgetName);\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img className={\"votingImg\"} src={VotingImg} alt={\"Page logo - picture of someone voting\"}/>\n                    <h1 id={\"mainTitle\"}>Voting App</h1>\n                    <AuthenticationSegment\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                    />\n                </header>\n                <main>\n                    <Intro\n                        order={orderOf(INTRO)}\n                        showing={showing(INTRO)}\n                    />\n                    <PollMenu\n                        order={orderOf(POLLMENU)}\n                        showing={showing(POLLMENU)}\n                    />\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/voting.71a5f5fb.jpg\";"],"sourceRoot":""}