{"version":3,"sources":["images/voting.jpg","components/AuthenticationSegment.js","components/Intro.js","components/PollMenu.js","components/Register.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AuthenticationSegment","react_default","a","createElement","className","onClick","this","props","showRegister","showLogin","username","authenticated","notAuthenticated","Component","Intro","widgetStyle","order","display","showing","width","animation","concat","style","close","PollMenu","Register","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","password","email","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","defineProperty","target","name","value","_this$state","axios","post","then","response","status","alert","console","log","data","catch","preventDefault","spaceAround","justifyContent","margin","onSubmit","onChange","type","id","required","Login","INTRO","POLLMENU","App","visibleWidgets","closeWidget","showWidget","widgetName","filter","widget","toConsumableArray","_this2","orderOf","indexOf","includes","src","VotingImg","alt","components_AuthenticationSegment","components_Intro","components_PollMenu","components_Register","components_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.deb3c2a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/voting.71a5f5fb.jpg\";","import React, {Component} from 'react';\r\n\r\nclass AuthenticationSegment extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         showRegister: false,\r\n    //         showLogin: false\r\n    //     };\r\n    // }\r\n\r\n    notAuthenticated() {\r\n        return(\r\n            <div className=\"authenticationLinks\">\r\n                <p className=\"clickableText\" onClick={this.props.showRegister}>Register</p>\r\n                <p> || </p>\r\n                <p className=\"clickableText\" onClick={this.props.showLogin}>Log In</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    authenticated() {\r\n        return(\r\n            <div>\r\n                <p>Welcome {this.props.username}</p>\r\n                <p className=\"clickableText\">Sign Out</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.authenticated ? this.authenticated() : this.notAuthenticated()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AuthenticationSegment;","import React, {Component} from 'react';\r\n\r\nclass Intro extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n\r\n    render() {\r\n        const widgetStyle = {\r\n            order: this.props.order,\r\n            display: (this.props.showing ? \"block\" : \"none\"),\r\n            width: \"30vw\",\r\n            animation: `appear 1s ease-out ${this.props.order*100}ms forwards`\r\n        };\r\n        // const xStyle = {width: 20};\r\n        return (\r\n            <div className={\"widget\"} style={widgetStyle}>\r\n                <div className={\"closeWidgetBtn\"}>\r\n                    <p onClick={this.props.close} className={\"innerX\"}>X</p>\r\n                </div>\r\n                <h2>Welcome to Cross Voting</h2>\r\n                <p>Here you can make your own polls, and have your friends vote on them.</p>\r\n                <p>You can do all this without making an account, but if you want to make lots of polls will need to register.</p>\r\n                <p>Registering is super easy, you can do it with a couple clicks if you use your Facebook or Google account.</p>\r\n                <p>You can also register using traditional means too.</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Intro;","import React, {Component} from 'react';\r\n\r\nclass PollMenu extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //\r\n    // }\r\n\r\n    render() {\r\n        const widgetStyle = {\r\n            order: this.props.order,\r\n            display: (this.props.showing ? \"block\" : \"none\"),\r\n            animation: `appear 1s ease-out ${this.props.order*200}ms forwards`\r\n        };\r\n        return (\r\n            <div className={\"widget\"} style={widgetStyle}>\r\n                <div className={\"closeWidgetBtn\"}>\r\n                    <p onClick={this.props.close} className={\"innerX\"}>X</p>\r\n                </div>\r\n                <h2>Poll Menu</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PollMenu;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Register extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n            email: \"\"\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        const { username, password, email } = this.state;\r\n        axios.post('/register', {username, password, email})\r\n            .then((response) => {\r\n                //handle success\r\n                if (response.status !== 200) {\r\n                    alert(\"There was a problem connecting to the server, see console for more information\");\r\n                    return console.log(response);\r\n                }\r\n                console.log(response.data);\r\n            })\r\n            .catch((response) => {\r\n                //handle error\r\n                alert(\"There was a problem connecting to the server, see console for more information\");\r\n                return console.log(response);\r\n            });\r\n        e.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        const widgetStyle = {\r\n            order: this.props.order,\r\n            display: (this.props.showing ? \"block\" : \"none\"),\r\n            width: \"30vw\",\r\n            animation: `appear 1s ease-out ${this.props.order*100}ms forwards`\r\n        };\r\n        const spaceAround = {\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            margin: '10px 0'\r\n        };\r\n        return (\r\n            <div className={\"widget\"} style={widgetStyle}>\r\n                <div className={\"closeWidgetBtn\"}>\r\n                    <p onClick={this.props.close} className={\"innerX\"}>X</p>\r\n                </div>\r\n                <h2>Register</h2>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div style={spaceAround}>\r\n                        <p>Username:</p>\r\n                        <input\r\n                            onChange={this.handleChange}\r\n                            name=\"username\"\r\n                            type=\"text\"\r\n                            id=\"registeringUsername\"\r\n                            value={this.state.username}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div style={spaceAround}>\r\n                        <p>Password:</p>\r\n                        <input\r\n                            onChange={this.handleChange}\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            id=\"registeringPassword\"\r\n                            value={this.state.password}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div style={spaceAround}>\r\n                        <p>Email:</p>\r\n                        <input\r\n                            onChange={this.handleChange}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            id=\"registeringEmail\"\r\n                            value={this.state.email}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;","import React, {Component} from 'react';\r\nimport axios from \"axios\";\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        const { username, password } = this.state;\r\n        axios.post('/login', {username, password})\r\n            .then((response) => {\r\n                //handle success\r\n                if (response.status !== 200) {\r\n                    alert(\"There was a problem connecting to the server, see console for more information\");\r\n                    return console.log(response);\r\n                }\r\n                console.log(response.data);\r\n            })\r\n            .catch((response) => {\r\n                //handle error\r\n                alert(\"There was a problem connecting to the server, see console for more information\");\r\n                return console.log(response);\r\n            });\r\n        e.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        const widgetStyle = {\r\n            order: this.props.order,\r\n            display: (this.props.showing ? \"block\" : \"none\"),\r\n            width: \"30vw\",\r\n            animation: `appear 1s ease-out ${this.props.order*100}ms forwards`\r\n        };\r\n        const spaceAround = {\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            margin: '10px 0'\r\n        };\r\n        return (\r\n            <div className={\"widget\"} style={widgetStyle}>\r\n                <div className={\"closeWidgetBtn\"}>\r\n                    <p onClick={this.props.close} className={\"innerX\"}>X</p>\r\n                </div>\r\n                <h2>Login</h2>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div style={spaceAround}>\r\n                        <p>Username:</p>\r\n                        <input\r\n                            onChange={this.handleChange}\r\n                            name=\"username\"\r\n                            type=\"text\"\r\n                            id=\"loginUsername\"\r\n                            value={this.state.username}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div style={spaceAround}>\r\n                        <p>Password:</p>\r\n                        <input\r\n                            onChange={this.handleChange}\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            id=\"loginPassword\"\r\n                            value={this.state.password}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","// Dependencies\r\nimport React, { Component } from 'react';\r\nimport './stylesheets/App.css';\r\nimport VotingImg from './images/voting.jpg';\r\n\r\n// My Modules\r\nimport AuthenticationSegment from './components/AuthenticationSegment';\r\nimport Intro from './components/Intro';\r\nimport PollMenu from './components/PollMenu';\r\nimport Register from './components/Register';\r\nimport Login from './components/Login';\r\n\r\n// Global variables for string-references of widgets, for consistency and efficiency in development\r\nconst INTRO = \"intro\";\r\nconst POLLMENU = \"pollMenu\";\r\nconst REGISTER = \"register\";\r\nconst LOGIN = \"login\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            authenticated: false,\r\n            username: \"\",\r\n            visibleWidgets: [INTRO, POLLMENU]\r\n        };\r\n        this.closeWidget = this.closeWidget.bind(this);\r\n        this.showWidget = this.showWidget.bind(this);\r\n    }\r\n\r\n    closeWidget(widgetName) {\r\n        this.setState({visibleWidgets: this.state.visibleWidgets.filter(widget => widget !== widgetName)});\r\n    }\r\n\r\n    showWidget(widgetName) {\r\n        this.setState({visibleWidgets: [widgetName, ...this.state.visibleWidgets]});\r\n    }\r\n\r\n    render() {\r\n        // Everything in <main> is divided into 'widgets'\r\n        // Each widget displays according to a particular order, if at all\r\n        // The two function expressions below determine whether it is showing, and what order it is if so\r\n        // These are passed as props to each component, or 'widget'\r\n        const orderOf = widgetName => this.state.visibleWidgets.indexOf(widgetName);\r\n        const showing = widgetName => this.state.visibleWidgets.includes(widgetName);\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <img className={\"votingImg\"} src={VotingImg} alt={\"someone voting\"}/>\r\n                    <h1 id={\"mainTitle\"}>Voting App</h1>\r\n                    <AuthenticationSegment\r\n                        authenticated={this.state.authenticated}\r\n                        username={this.state.username}\r\n                        showRegister={() => this.showWidget(REGISTER)}\r\n                        showLogin={() => this.showWidget(LOGIN)}\r\n                    />\r\n                </header>\r\n                <main>\r\n                    <Intro\r\n                        order={orderOf(INTRO)}\r\n                        showing={showing(INTRO)}\r\n                        close={() => {this.closeWidget(INTRO)}}\r\n                    />\r\n                    <PollMenu\r\n                        order={orderOf(POLLMENU)}\r\n                        showing={showing(POLLMENU)}\r\n                        close={() => {this.closeWidget(POLLMENU)}}\r\n                    />\r\n                    <Register\r\n                        order={orderOf(REGISTER)}\r\n                        showing={showing(REGISTER)}\r\n                        close={() => {this.closeWidget(REGISTER)}}\r\n                    />\r\n                    <Login\r\n                        order={orderOf(LOGIN)}\r\n                        showing={showing(LOGIN)}\r\n                        close={() => {this.closeWidget(LOGIN)}}\r\n                    />\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}