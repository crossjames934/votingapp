{"version":3,"sources":["images/voting.jpg","components/AuthenticationSegment.js","components/Intro.js","components/PollMenu.js","components/Register.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AuthenticationSegment","react_default","a","createElement","className","onClick","this","props","showRegister","showLogin","username","authenticated","notAuthenticated","Component","Intro","widgetStyle","order","display","showing","width","animation","concat","style","close","PollMenu","Register","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","password","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","defineProperty","target","name","value","axios","post","then","res","console","log","preventDefault","spaceAround","justifyContent","margin","action","method","onSubmit","onChange","type","id","required","INTRO","POLLMENU","App","visibleWidgets","closeWidget","showWidget","widgetName","filter","widget","toConsumableArray","_this2","orderOf","indexOf","includes","src","VotingImg","alt","components_AuthenticationSegment","components_Intro","components_PollMenu","components_Register","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f0b399b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/voting.71a5f5fb.jpg\";","import React, {Component} from 'react';\n\nclass AuthenticationSegment extends Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         showRegister: false,\n    //         showLogin: false\n    //     };\n    // }\n\n    notAuthenticated() {\n        return(\n            <div className=\"authenticationLinks\">\n                <p className=\"clickableText\" onClick={this.props.showRegister}>Register</p>\n                <p> || </p>\n                <p className=\"clickableText\" onClick={this.props.showLogin}>Log In</p>\n            </div>\n        );\n    }\n\n    authenticated() {\n        return(\n            <div>\n                <p>Welcome {this.props.username}</p>\n                <p className=\"clickableText\">Sign Out</p>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.authenticated ? this.authenticated() : this.notAuthenticated()}\n            </div>\n        );\n    }\n}\n\nexport default AuthenticationSegment;","import React, {Component} from 'react';\n\nclass Intro extends Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    render() {\n        const widgetStyle = {\n            order: this.props.order,\n            display: (this.props.showing ? \"block\" : \"none\"),\n            width: \"30vw\",\n            animation: `appear 1s ease-out ${this.props.order*100}ms forwards`\n        };\n        // const xStyle = {width: 20};\n        return (\n            <div className={\"widget\"} style={widgetStyle}>\n                <div onClick={this.props.close} className={\"closeWidgetBtn\"}>\n                    <p className={\"innerX\"}>X</p>\n                </div>\n                <h2>Welcome to Cross Voting</h2>\n                <p>Here you can make your own polls, and have your friends vote on them.</p>\n                <p>You need to register if you want to create your own polls, but you can vote on other polls without an account.</p>\n                <p>Registering is super easy, you can do it with a couple clicks if you use your Facebook or Google account.</p>\n                <p>You can also register using traditional means too.</p>\n            </div>\n        );\n    }\n}\n\nexport default Intro;","import React, {Component} from 'react';\n\nclass PollMenu extends Component {\n    // constructor(props) {\n    //     super(props);\n    //\n    // }\n\n    render() {\n        const widgetStyle = {\n            order: this.props.order,\n            display: (this.props.showing ? \"block\" : \"none\"),\n            animation: `appear 1s ease-out ${this.props.order*200}ms forwards`\n        };\n        return (\n            <div className={\"widget\"} style={widgetStyle}>\n                <div onClick={this.props.close} className={\"closeWidgetBtn\"}>\n                    <p className={\"innerX\"}>X</p>\n                </div>\n                <h2>Poll Menu</h2>\n            </div>\n        );\n    }\n}\n\nexport default PollMenu;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmit(e) {\n        axios.post('/register', {\n            username: this.state.username,\n            password: this.state.password\n        })\n            .then(res => {\n                console.log(res);\n            });\n        e.preventDefault();\n    }\n\n    render() {\n        const widgetStyle = {\n            order: this.props.order,\n            display: (this.props.showing ? \"block\" : \"none\"),\n            width: \"30vw\",\n            animation: `appear 1s ease-out ${this.props.order*100}ms forwards`\n        };\n        const spaceAround = {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            margin: '10px 0'\n        };\n        return (\n            <div className={\"widget\"} style={widgetStyle}>\n                <div onClick={this.props.close} className={\"closeWidgetBtn\"}>\n                    <p className={\"innerX\"}>X</p>\n                </div>\n                <h2>Register</h2>\n                <form action=\"/register\" method=\"POST\" onSubmit={this.handleSubmit}>\n                    <div style={spaceAround}>\n                        <p>Username:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"username\"\n                            type=\"text\"\n                            id=\"registeringUsername\"\n                            value={this.state.username}\n                            required\n                        />\n                    </div>\n                    <div style={spaceAround}>\n                        <p>Password:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"password\"\n                            type=\"password\"\n                            id=\"registeringPassword\"\n                            value={this.state.password}\n                            required\n                        />\n                    </div>\n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Register;","// Dependencies\nimport React, { Component } from 'react';\nimport './stylesheets/App.css';\nimport VotingImg from './images/voting.jpg';\n\n// My Modules\nimport AuthenticationSegment from './components/AuthenticationSegment';\nimport Intro from './components/Intro';\nimport PollMenu from './components/PollMenu';\nimport Register from './components/Register';\n\n// Global variables for string-references of widgets, for consistency and efficiency in development\nconst INTRO = \"intro\";\nconst POLLMENU = \"pollMenu\";\nconst REGISTER = \"register\";\nconst LOGIN = \"login\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            authenticated: false,\n            username: \"\",\n            visibleWidgets: [INTRO, POLLMENU]\n        };\n        this.closeWidget = this.closeWidget.bind(this);\n        this.showWidget = this.showWidget.bind(this);\n    }\n\n    closeWidget(widgetName) {\n        this.setState({visibleWidgets: this.state.visibleWidgets.filter(widget => widget !== widgetName)});\n    }\n\n    showWidget(widgetName) {\n        this.setState({visibleWidgets: [widgetName, ...this.state.visibleWidgets]});\n    }\n\n    render() {\n        // Everything in <main> is divided into 'widgets'\n        // Each widget displays according to a particular order, if at all\n        // The two function expressions below determine whether it is showing, and what order it is if so\n        // These are passed as props to each component, or 'widget'\n        const orderOf = widgetName => this.state.visibleWidgets.indexOf(widgetName);\n        const showing = widgetName => this.state.visibleWidgets.includes(widgetName);\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img className={\"votingImg\"} src={VotingImg} alt={\"someone voting\"}/>\n                    <h1 id={\"mainTitle\"}>Voting App</h1>\n                    <AuthenticationSegment\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        showRegister={() => this.showWidget(REGISTER)}\n                        showLogin={() => this.showWidget(LOGIN)}\n                    />\n                </header>\n                <main>\n                    <Intro\n                        order={orderOf(INTRO)}\n                        showing={showing(INTRO)}\n                        close={() => {this.closeWidget(INTRO)}}\n                    />\n                    <PollMenu\n                        order={orderOf(POLLMENU)}\n                        showing={showing(POLLMENU)}\n                        close={() => {this.closeWidget(POLLMENU)}}\n                    />\n                    <Register\n                        order={orderOf(REGISTER)}\n                        showing={showing(REGISTER)}\n                        close={() => {this.closeWidget(REGISTER)}}\n                    />\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}