{"version":3,"sources":["images/voting.jpg","components/AuthenticationSegment.js","components/Intro.js","components/PollMenu.js","components/Register.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AuthenticationSegment","react_default","a","createElement","className","onClick","this","props","showRegister","showLogin","username","authenticated","notAuthenticated","Component","Intro","widgetStyle","order","display","showing","width","animation","concat","style","close","PollMenu","Register","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","password","email","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","defineProperty","target","name","value","_this$state","axios","post","then","response","status","alert","console","log","data","catch","preventDefault","spaceAround","justifyContent","margin","onSubmit","onChange","type","id","required","INTRO","POLLMENU","App","visibleWidgets","closeWidget","showWidget","widgetName","filter","widget","toConsumableArray","_this2","orderOf","indexOf","includes","src","VotingImg","alt","components_AuthenticationSegment","components_Intro","components_PollMenu","components_Register","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed75e67a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/voting.71a5f5fb.jpg\";","import React, {Component} from 'react';\n\nclass AuthenticationSegment extends Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         showRegister: false,\n    //         showLogin: false\n    //     };\n    // }\n\n    notAuthenticated() {\n        return(\n            <div className=\"authenticationLinks\">\n                <p className=\"clickableText\" onClick={this.props.showRegister}>Register</p>\n                <p> || </p>\n                <p className=\"clickableText\" onClick={this.props.showLogin}>Log In</p>\n            </div>\n        );\n    }\n\n    authenticated() {\n        return(\n            <div>\n                <p>Welcome {this.props.username}</p>\n                <p className=\"clickableText\">Sign Out</p>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.authenticated ? this.authenticated() : this.notAuthenticated()}\n            </div>\n        );\n    }\n}\n\nexport default AuthenticationSegment;","import React, {Component} from 'react';\n\nclass Intro extends Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    render() {\n        const widgetStyle = {\n            order: this.props.order,\n            display: (this.props.showing ? \"block\" : \"none\"),\n            width: \"30vw\",\n            animation: `appear 1s ease-out ${this.props.order*100}ms forwards`\n        };\n        // const xStyle = {width: 20};\n        return (\n            <div className={\"widget\"} style={widgetStyle}>\n                <div className={\"closeWidgetBtn\"}>\n                    <p onClick={this.props.close} className={\"innerX\"}>X</p>\n                </div>\n                <h2>Welcome to Cross Voting</h2>\n                <p>Here you can make your own polls, and have your friends vote on them.</p>\n                <p>You can do all this without making an account, but if you want to make lots of polls will need to register.</p>\n                <p>Registering is super easy, you can do it with a couple clicks if you use your Facebook or Google account.</p>\n                <p>You can also register using traditional means too.</p>\n            </div>\n        );\n    }\n}\n\nexport default Intro;","import React, {Component} from 'react';\n\nclass PollMenu extends Component {\n    // constructor(props) {\n    //     super(props);\n    //\n    // }\n\n    render() {\n        const widgetStyle = {\n            order: this.props.order,\n            display: (this.props.showing ? \"block\" : \"none\"),\n            animation: `appear 1s ease-out ${this.props.order*200}ms forwards`\n        };\n        return (\n            <div className={\"widget\"} style={widgetStyle}>\n                <div className={\"closeWidgetBtn\"}>\n                    <p onClick={this.props.close} className={\"innerX\"}>X</p>\n                </div>\n                <h2>Poll Menu</h2>\n            </div>\n        );\n    }\n}\n\nexport default PollMenu;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            email: \"\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmit(e) {\n        const { username, password, email } = this.state;\n        axios.post('/register', {username, password, email})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                console.log(response.data);\n            })\n            .catch((response) => {\n                //handle error\n                alert(\"There was a problem connecting to the server, see console for more information\");\n                return console.log(response);\n            });\n        e.preventDefault();\n    }\n\n    render() {\n        const widgetStyle = {\n            order: this.props.order,\n            display: (this.props.showing ? \"block\" : \"none\"),\n            width: \"30vw\",\n            animation: `appear 1s ease-out ${this.props.order*100}ms forwards`\n        };\n        const spaceAround = {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            margin: '10px 0'\n        };\n        return (\n            <div className={\"widget\"} style={widgetStyle}>\n                <div className={\"closeWidgetBtn\"}>\n                    <p onClick={this.props.close} className={\"innerX\"}>X</p>\n                </div>\n                <h2>Register</h2>\n                <form onSubmit={this.handleSubmit}>\n                    <div style={spaceAround}>\n                        <p>Username:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"username\"\n                            type=\"text\"\n                            id=\"registeringUsername\"\n                            value={this.state.username}\n                            required\n                        />\n                    </div>\n                    <div style={spaceAround}>\n                        <p>Password:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"password\"\n                            type=\"password\"\n                            id=\"registeringPassword\"\n                            value={this.state.password}\n                            required\n                        />\n                    </div>\n                    <div style={spaceAround}>\n                        <p>Email:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"email\"\n                            type=\"email\"\n                            id=\"registeringEmail\"\n                            value={this.state.email}\n                            required\n                        />\n                    </div>\n                    <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Register;","// Dependencies\nimport React, { Component } from 'react';\nimport './stylesheets/App.css';\nimport VotingImg from './images/voting.jpg';\n\n// My Modules\nimport AuthenticationSegment from './components/AuthenticationSegment';\nimport Intro from './components/Intro';\nimport PollMenu from './components/PollMenu';\nimport Register from './components/Register';\n\n// Global variables for string-references of widgets, for consistency and efficiency in development\nconst INTRO = \"intro\";\nconst POLLMENU = \"pollMenu\";\nconst REGISTER = \"register\";\nconst LOGIN = \"login\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            authenticated: false,\n            username: \"\",\n            visibleWidgets: [INTRO, POLLMENU]\n        };\n        this.closeWidget = this.closeWidget.bind(this);\n        this.showWidget = this.showWidget.bind(this);\n    }\n\n    closeWidget(widgetName) {\n        this.setState({visibleWidgets: this.state.visibleWidgets.filter(widget => widget !== widgetName)});\n    }\n\n    showWidget(widgetName) {\n        this.setState({visibleWidgets: [widgetName, ...this.state.visibleWidgets]});\n    }\n\n    render() {\n        // Everything in <main> is divided into 'widgets'\n        // Each widget displays according to a particular order, if at all\n        // The two function expressions below determine whether it is showing, and what order it is if so\n        // These are passed as props to each component, or 'widget'\n        const orderOf = widgetName => this.state.visibleWidgets.indexOf(widgetName);\n        const showing = widgetName => this.state.visibleWidgets.includes(widgetName);\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img className={\"votingImg\"} src={VotingImg} alt={\"someone voting\"}/>\n                    <h1 id={\"mainTitle\"}>Voting App</h1>\n                    <AuthenticationSegment\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        showRegister={() => this.showWidget(REGISTER)}\n                        showLogin={() => this.showWidget(LOGIN)}\n                    />\n                </header>\n                <main>\n                    <Intro\n                        order={orderOf(INTRO)}\n                        showing={showing(INTRO)}\n                        close={() => {this.closeWidget(INTRO)}}\n                    />\n                    <PollMenu\n                        order={orderOf(POLLMENU)}\n                        showing={showing(POLLMENU)}\n                        close={() => {this.closeWidget(POLLMENU)}}\n                    />\n                    <Register\n                        order={orderOf(REGISTER)}\n                        showing={showing(REGISTER)}\n                        close={() => {this.closeWidget(REGISTER)}}\n                    />\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}