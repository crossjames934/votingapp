{"version":3,"sources":["components/AuthenticationSegment.js","components/CloseWidgetBtn.js","components/MainMenu.js","components/Intro.js","components/PollMenu.js","components/CreateNewPoll.js","components/Register.js","components/Login.js","App.js","serviceWorker.js","index.js","components/widgetStyle.js"],"names":["AuthenticationSegment","logout","axios","get","then","res","console","log","data","_this","props","updateParentState","authenticated","username","attemptedLogin","catch","e","alert","react_default","a","createElement","className","onClick","this","showRegister","showLogin","notAuthenticated","Component","CloseWidgetBtn","close","MainMenu","visibleOptions","Object","toConsumableArray","widgets","filter","option","listItems","map","widget","widgetShowing","visibleWidgets","includes","liStyle","textShadow","cursor","toggleWidget","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","closeWidget","showWidget","bringMenuToFront","stop","apply","arguments","key","style","id","widgetStyle","order","showing","components_CloseWidgetBtn","options","Intro","PollMenu","CreateNewPoll","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","question","choices","handleChange","bind","assertThisInitialized","handleSubmit","addNewChoice","setState","defineProperty","target","name","value","author","post","response","status","preventDefault","width","height","_this2","choice","index","onChange","arrayForUpdate","slice","type","required","length","splice","blankSpace","concat","onSubmit","Register","password","email","_this$state","Login","failedMessage","loggedIn","message","setTimeout","loginForm","INTRO","MAIN_MENU","POLL_MENU","App","stateObject","widgetName","containsMenu","otherWidgets","updateArray","unshift","_this3","orderOf","indexOf","components_AuthenticationSegment","components_MainMenu","replace","components_Intro","components_PollMenu","components_CreateNewPoll","components_Register","components_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","display","minWidth","maxWidth","animation"],"mappings":"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","file":"static/js/main.c47a51d9.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\n\nclass AuthenticationSegment extends Component {\n    logout = () => {\n        axios.get('/logout')\n            .then(res => {\n                console.log(res.data);\n                // this.props.updateAuthenticationStatus(false, \"\");\n                this.props.updateParentState({\n                    authenticated: false,\n                    username: \"\",\n                    attemptedLogin: false\n                });\n            })\n            .catch(e => {\n                alert(\"There was an error connecting, please check console for the error\");\n                console.log(e);\n            });\n    };\n\n    notAuthenticated() {\n        return(\n            <div className=\"authenticationLinks\">\n                <p className=\"clickableText\" onClick={this.props.showRegister}>Register</p>\n                <p> || </p>\n                <p className=\"clickableText\" onClick={this.props.showLogin}>Log In</p>\n            </div>\n        );\n    }\n\n    authenticated() {\n        return(\n            <div>\n                <p>Welcome {this.props.username}</p>\n                <p className=\"clickableText\" onClick={this.logout}>Sign Out</p>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.authenticated ? this.authenticated() : this.notAuthenticated()}\n            </div>\n        );\n    }\n}\n\nexport default AuthenticationSegment;","import React, {Component} from 'react';\n\nclass CloseWidgetBtn extends Component {\n    render() {\n        return (\n            <div className={\"closeWidgetBtn\"}>\n                <p onClick={this.props.close} className={\"innerX\"}>X</p>\n            </div>\n        );\n    }\n}\n\nexport default CloseWidgetBtn;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass MainMenu extends Component {\n    options() {\n        let visibleOptions = [...this.props.widgets];\n        if (this.props.authenticated) {\n            visibleOptions = visibleOptions.filter(option => option !== \"Login\" && option !== \"Register\");\n        }\n        let listItems = visibleOptions.map(widget => {\n            const widgetShowing = this.props.visibleWidgets.includes(widget);\n            const liStyle = {\n                textShadow: widgetShowing ? \"0 0 2px gold\" : \"none\",\n                cursor: \"pointer\"\n            };\n            const toggleWidget = async () => {\n                await widgetShowing ?\n                    this.props.closeWidget(widget) :\n                    this.props.showWidget(widget);\n                this.props.bringMenuToFront();\n            };\n            return (\n                <li key={widget} onClick={toggleWidget} style={liStyle}>{widget}</li>\n            );\n        });\n        return(\n            <ul className={\"mainMenuOptions\"}>\n                {listItems}\n            </ul>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Main Menu</h2>\n                    {this.options()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MainMenu;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Intro extends Component {\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Welcome to Cross Voting</h2>\n                    <p>Here you can make your own polls, and have your friends vote on them.</p>\n                    <p>You can do all this without making an account, but if you want to make lots of polls you will need to register.</p>\n                    <p>Registering is super easy, you can do it with a couple clicks if you use your Facebook or Google account.</p>\n                    <p>You can also register using traditional means too.</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Intro;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass PollMenu extends Component {\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Poll Menu</h2>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PollMenu;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\nimport axios from \"axios\";\n\nclass CreateNewPoll extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            question: \"\",\n            choices: [\"\", \"\"]\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.addNewChoice = this.addNewChoice.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    async handleSubmit(e) {\n        const author = this.props.username;\n        const { question, choices } = this.state;\n        axios.post('/poll', {question, choices, author})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem after connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n\n            })\n            .catch((response) => {\n                //handle error\n                console.log(response);\n            });\n        e.preventDefault();\n    }\n\n    blankSpace() {\n        return (\n            <div style={{width: 30, height: 30}}> </div>\n        );\n    }\n\n    choices() {\n        // For each choice, generate an input field with label\n        return this.state.choices.map((choice, index) => {\n            const changeChoice = e => {\n                const arrayForUpdate = this.state.choices.slice();\n                arrayForUpdate[index] = e.target.value;\n                this.setState({choices: arrayForUpdate});\n            };\n            const deleteChoice = () => {\n                let arrayForUpdate = this.state.choices.slice();\n                arrayForUpdate.splice(index, 1);\n                this.setState({choices: arrayForUpdate});\n\n            };\n            return(\n                <div key={\"choice_\"+index} className=\"spaceAround\">\n                    <p>Choice {index+1}: </p>\n                    <input onChange={changeChoice} value={this.state.choices[index]} type=\"text\" required/>\n                    {\n                        // If there's more than 2 choices, you can delete one\n                        this.state.choices.length > 2 ?\n                        <p onClick={deleteChoice} className={\"innerX\"}>X</p> :\n                        this.blankSpace()\n                    }\n                </div>\n            )\n        });\n    }\n\n    addNewChoice() {\n        this.setState({choices: [...this.state.choices, \"\"]});\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Create New Poll</h2>\n                    <form onSubmit={this.handleSubmit}>\n                        <div className=\"spaceAround\">\n                            <p>Question: </p>\n                            <input name={\"question\"} onChange={this.handleChange} type=\"text\" value={this.state.question} required/>\n                            {this.blankSpace()}\n                        </div>\n                        {this.choices()}\n                        <button className={\"addNewChoiceBtn\"} onClick={this.addNewChoice}>Add New Choice</button>\n                        <br/>\n                        <input className={\"submitBtn\"} type=\"submit\" value=\"Submit Poll\"/>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CreateNewPoll;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            email: \"\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmit(e) {\n        const { username, password, email } = this.state;\n        axios.post('/register', {username, password, email})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                console.log(response.data);\n            })\n            .catch((response) => {\n                //handle error\n                alert(\"There was a problem connecting to the server, see console for more information\");\n                return console.log(response);\n            });\n        e.preventDefault();\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Register</h2>\n                    <form onSubmit={this.handleSubmit}>\n                        <div className=\"spaceAround\">\n                            <p>Username:</p>\n                            <input\n                                onChange={this.handleChange}\n                                name=\"username\"\n                                type=\"text\"\n                                id=\"registeringUsername\"\n                                value={this.state.username}\n                                required\n                            />\n                        </div>\n                        <div className=\"spaceAround\">\n                            <p>Password:</p>\n                            <input\n                                onChange={this.handleChange}\n                                name=\"password\"\n                                type=\"password\"\n                                id=\"registeringPassword\"\n                                value={this.state.password}\n                                required\n                            />\n                        </div>\n                        <div className=\"spaceAround\">\n                            <p>Email:</p>\n                            <input\n                                onChange={this.handleChange}\n                                name=\"email\"\n                                type=\"email\"\n                                id=\"registeringEmail\"\n                                value={this.state.email}\n                                required\n                            />\n                        </div>\n                        <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Register;","import React, {Component} from 'react';\nimport axios from \"axios\";\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            failedMessage: \"\"\n        };\n        // this.loginTimeout = null;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmit(e) {\n        this.props.updateParentState({attemptedLogin: true});\n        // this.loginTimeout = setTimeout(() => {\n        //\n        // }, 10000);\n        this.setState({failedMessage: \"\"});\n        const { username, password } = this.state;\n        axios.post('/login', {username, password})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem after connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                if (response.data.loggedIn) {\n                    // update log in status of parent\n                    this.props.updateParentState({\n                        authenticated: true,\n                        username: response.data.message\n                    });\n                    // Must clear fields for cyber-security!\n                    this.setState({\n                        username: \"\",\n                        password: \"\"\n                    });\n                    // close widget after 2 seconds\n                    setTimeout(this.props.close, 2000);\n                } else {\n                    this.setState({failedMessage: response.data.message});\n                    this.props.updateParentState({attemptedLogin: false});\n                }\n            })\n            .catch((response) => {\n                //handle error\n                console.log(response);\n                this.setState({\n                    failedMessage: \"Trouble connecting to server. Potentially from loss of internet connection. See console for more details\"\n                });\n                this.props.updateParentState({attemptedLogin: false});\n            });\n        e.preventDefault();\n    }\n\n    attemptedLogin() {\n        const message = this.props.authenticated ? \"You have logged in successfully!\" : \"Please wait...\";\n        return(\n            <div>\n                <p>{message}</p>\n            </div>\n        );\n    }\n\n    loginForm() {\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"spaceAround\">\n                        <p>Username:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"username\"\n                            type=\"text\"\n                            id=\"loginUsername\"\n                            value={this.state.username}\n                            required\n                        />\n                    </div>\n                    <div className=\"spaceAround\">\n                        <p>Password:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"password\"\n                            type=\"password\"\n                            id=\"loginPassword\"\n                            value={this.state.password}\n                            required\n                        />\n                    </div>\n                    <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\n                </form>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Login</h2>\n                    {this.props.attemptedLogin ? this.attemptedLogin() : this.loginForm()}\n                    <p className={\"red\"}>{this.state.failedMessage}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;","// Dependencies\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './stylesheets/App.css';\n// import VotingImg from './images/voting.jpg';\n\n// My Modules\nimport AuthenticationSegment from './components/AuthenticationSegment';\nimport MainMenu from './components/MainMenu';\nimport Intro from './components/Intro';\nimport PollMenu from './components/PollMenu';\nimport CreateNewPoll from './components/CreateNewPoll';\nimport Register from './components/Register';\nimport Login from './components/Login';\n\n// Global variables for string-references of widgets, for consistency and efficiency in development\nconst INTRO = \"Intro\";\nconst MAIN_MENU = \"Main Menu\";\nconst POLL_MENU = \"Poll Menu\";\nconst REGISTER = \"Register\";\nconst LOGIN = \"Login\";\nconst CREATE_NEW_POLL = \"Create New Poll\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            authenticated: false,\n            username: \"\",\n            visibleWidgets: [INTRO, POLL_MENU],\n            attemptedLogin: false\n        };\n        this.closeWidget = this.closeWidget.bind(this);\n        this.showWidget = this.showWidget.bind(this);\n        this.updateParentState = this.updateParentState.bind(this);\n        this.bringMenuToFront = this.bringMenuToFront.bind(this);\n    }\n\n    componentDidMount() {\n        // Check if user is already logged in to display components accordingly (i.e. Welcome message)\n        axios.get('/whoami')\n            .then(res => {\n                if (res.data) {\n                    this.setState({authenticated: true, username: res.data});\n                }\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    updateParentState(stateObject) {\n        this.setState(stateObject);\n    }\n\n    closeWidget(widgetName) {\n        this.setState({visibleWidgets: this.state.visibleWidgets.filter(widget => widget !== widgetName)});\n    }\n\n    showWidget(widgetName) {\n        const containsMenu = this.state.visibleWidgets.includes(MAIN_MENU);\n        const otherWidgets = this.state.visibleWidgets.filter(widget => widget !== MAIN_MENU);\n        const updateArray = [widgetName, ...otherWidgets];\n        if (containsMenu) updateArray.unshift(MAIN_MENU);\n        this.setState({visibleWidgets: updateArray});\n    }\n\n    bringMenuToFront() {\n        const otherWidgets = this.state.visibleWidgets.filter(widget => widget !== MAIN_MENU);\n        this.setState({visibleWidgets: [MAIN_MENU, ...otherWidgets]});\n    }\n\n    // componentDidUpdate() {\n    //     const widgets = document.getElementsByClassName('widget');\n    //     for (let i = 0; i < widgets.length; i++) {\n    //         const el = widgets[i];\n    //         const curOverflow = el.style.overflow;\n    //\n    //         if ( !curOverflow || curOverflow === \"visible\" )\n    //             el.style.overflow = \"hidden\";\n    //\n    //         let isOverflowing = el.clientWidth < el.scrollWidth\n    //             || el.clientHeight < el.scrollHeight;\n    //\n    //         el.style.overflowY = isOverflowing ? \"scroll\" : \"hidden\";\n    //     }\n    // }\n\n    render() {\n        // Everything in <main> is divided into 'widgets'\n        // Each widget displays according to a particular order, if at all\n        // The two function expressions below determine whether it is showing, and what order it is if so\n        // These are passed as props to each component, or 'widget'\n        const orderOf = widgetName => this.state.visibleWidgets.indexOf(widgetName);\n        const showing = widgetName => this.state.visibleWidgets.includes(widgetName);\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <p className={\"hamburgerIcon\"} onClick={() => { this.showWidget(MAIN_MENU) }}>&#9776;</p>\n                    <h1 id={\"mainTitle\"}>Voting App</h1>\n                    <AuthenticationSegment\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        showRegister={() => this.showWidget(REGISTER)}\n                        showLogin={() => this.showWidget(LOGIN)}\n                        updateParentState={this.updateParentState}\n                    />\n                </header>\n                <main>\n                    <MainMenu\n                        widgets={[INTRO, POLL_MENU, CREATE_NEW_POLL, REGISTER, LOGIN]}\n                        order={orderOf(MAIN_MENU)}\n                        showing={showing(MAIN_MENU)}\n                        close={() => {this.closeWidget(MAIN_MENU)}}\n                        visibleWidgets={this.state.visibleWidgets}\n                        showWidget={this.showWidget}\n                        closeWidget={this.closeWidget}\n                        bringMenuToFront={this.bringMenuToFront}\n                        authenticated={this.state.authenticated}\n                        id={MAIN_MENU.replace(/\\s/g, \"\")}\n                    />\n                    <Intro\n                        order={orderOf(INTRO)}\n                        showing={showing(INTRO)}\n                        close={() => {this.closeWidget(INTRO)}}\n                        id={INTRO.replace(/\\s/g, \"\")}\n                    />\n                    <PollMenu\n                        order={orderOf(POLL_MENU)}\n                        showing={showing(POLL_MENU)}\n                        close={() => {this.closeWidget(POLL_MENU)}}\n                        id={POLL_MENU.replace(/\\s/g, \"\")}\n                    />\n                    <CreateNewPoll\n                        order={orderOf(CREATE_NEW_POLL)}\n                        showing={showing(CREATE_NEW_POLL)}\n                        close={() => {this.closeWidget(CREATE_NEW_POLL)}}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        id={CREATE_NEW_POLL.replace(/\\s/g, \"\")}\n                    />\n                    <Register\n                        order={orderOf(REGISTER)}\n                        showing={showing(REGISTER)}\n                        close={() => {this.closeWidget(REGISTER)}}\n                        id={REGISTER.replace(/\\s/g, \"\")}\n                    />\n                    <Login\n                        order={orderOf(LOGIN)}\n                        showing={showing(LOGIN)}\n                        close={() => {this.closeWidget(LOGIN)}}\n                        authenticated={this.state.authenticated}\n                        attemptedLogin={this.state.attemptedLogin}\n                        updateParentState={this.updateParentState}\n                        id={LOGIN.replace(/\\s/g, \"\")}\n                    />\n                    <p className={\"noWidgetMsg\"} onClick={() => { this.showWidget(MAIN_MENU) }}>\n                        {this.state.visibleWidgets.length === 0 ? \"Click here or ☰ for the menu\" : \"\"}\n                    </p>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = (order, showing) => {\n    return {\n        order,\n        display: (showing ? \"block\" : \"none\"),\n        minWidth: \"30vw\",\n        maxWidth: \"380px\",\n        animation: `appear 1s ease-out ${order*100}ms forwards`\n    };\n};"],"sourceRoot":""}