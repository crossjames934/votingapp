{"version":3,"sources":["components/AuthenticationSegment.js","components/CloseWidgetBtn.js","components/MainMenu.js","components/Intro.js","components/PollMenu.js","components/MyPolls.js","components/CreateNewPoll.js","components/Chart.js","components/ShowPoll.js","components/Register.js","components/Login.js","App.js","serviceWorker.js","index.js","components/widgetStyle.js"],"names":["AuthenticationSegment","logout","axios","get","then","res","console","log","data","_this","props","updateParentState","authenticated","username","attemptedLogin","catch","e","alert","react_default","a","createElement","className","onClick","this","showRegister","showLogin","notAuthenticated","Component","CloseWidgetBtn","close","MainMenu","visibleOptions","Object","toConsumableArray","widgets","listItems","filter","option","map","widget","widgetShowing","visibleWidgets","includes","liStyle","textShadow","cursor","toggleWidget","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","closeWidget","showWidget","bringMenuToFront","stop","apply","arguments","key","style","id","widgetStyle","order","showing","components_CloseWidgetBtn","options","Intro","RECENT","PollMenu","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchQuery","list","sortBy","showList","bind","assertThisInitialized","handleChange","getPollList","listCall","forEach","poll","dateAdded","Date","lastVotedOn","setState","sortList","t0","_this2","length","regex","RegExp","test","question","showingPollId","showPoll","category","sort","b","defineProperty","target","name","value","needsUpdate","pollMenuNeedsUpdate","_this3","onChange","type","MyPolls","errorMessage","polls","previousUsername","getMyPolls","post","error","message","_id","CreateNewPoll","choices","submitAttempted","submitSucceeded","handleSubmit","addNewChoice","author","response","status","preventDefault","width","height","choice","index","arrayForUpdate","slice","required","splice","blankSpace","concat","_this4","onSubmit","showSubmitStatus","showForm","Chart","createChart","choiceArr","dataForPie","responseData","datum","count","chart","document","getElementById","innerHTML","radius","Math","min","svg","d3","append","attr","color","domain","range","data_ready","d","pie","arc","innerRadius","outerRadius","outerArc","selectAll","enter","posA","centroid","posB","posC","midangle","startAngle","endAngle","PI","text","pos","ShowPoll","pollId","submittedVote","pollData","getPollData","pollCall","ip","voteResponse","_context2","castVote","choiceCount","push","components_Chart","showResults","showChoiceBtns","Register","password","email","submitted","successMessage","_this$state","setTimeout","showSuccess","registrationForm","Login","failedMessage","loggedIn","closeRegister","loginForm","INTRO","MAIN_MENU","POLL_MENU","App","stateObject","widgetName","otherWidgets","updateArray","unshift","orderOf","indexOf","components_AuthenticationSegment","components_MainMenu","replace","components_Intro","components_PollMenu","components_MyPolls","components_CreateNewPoll","components_ShowPoll","components_Register","components_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister","module","exports","display","animation"],"mappings":"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","file":"static/js/main.8f898c89.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\n\nclass AuthenticationSegment extends Component {\n    logout = () => {\n        axios.get('/logout')\n            .then(res => {\n                console.log(res.data);\n                // this.props.updateAuthenticationStatus(false, \"\");\n                this.props.updateParentState({\n                    authenticated: false,\n                    username: \"\",\n                    attemptedLogin: false\n                });\n            })\n            .catch(e => {\n                alert(\"There was an error connecting, please check console for the error\");\n                console.log(e);\n            });\n    };\n\n    notAuthenticated() {\n        return(\n            <div className=\"authenticationLinks\">\n                <p className=\"clickableText\" onClick={this.props.showRegister}>Register</p>\n                <p> || </p>\n                <p className=\"clickableText\" onClick={this.props.showLogin}>Log In</p>\n            </div>\n        );\n    }\n\n    authenticated() {\n        return(\n            <div>\n                <p>Welcome {this.props.username}</p>\n                <p className=\"clickableText\" onClick={this.logout}>Sign Out</p>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.authenticated ? this.authenticated() : this.notAuthenticated()}\n            </div>\n        );\n    }\n}\n\nexport default AuthenticationSegment;","import React, {Component} from 'react';\n\nclass CloseWidgetBtn extends Component {\n    render() {\n        return (\n            <div className={\"closeWidgetBtn\"}>\n                <p onClick={this.props.close} className={\"innerX\"}>X</p>\n            </div>\n        );\n    }\n}\n\nexport default CloseWidgetBtn;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass MainMenu extends Component {\n    options() {\n        let visibleOptions = [...this.props.widgets];\n        if (this.props.authenticated) {\n            visibleOptions = visibleOptions.filter(option => option !== \"Login\" && option !== \"Register\");\n        } else {\n            visibleOptions = visibleOptions.filter(option => option !== \"My Polls\");\n        }\n        let listItems = visibleOptions.map(widget => {\n            const widgetShowing = this.props.visibleWidgets.includes(widget);\n            const liStyle = {\n                textShadow: widgetShowing ? \"0 0 2px gold\" : \"none\",\n                cursor: \"pointer\"\n            };\n            const toggleWidget = async () => {\n                await widgetShowing ?\n                    this.props.closeWidget(widget) :\n                    this.props.showWidget(widget);\n                this.props.bringMenuToFront();\n            };\n            return (\n                <li key={widget} onClick={toggleWidget} style={liStyle}>{widget}</li>\n            );\n        });\n        return(\n            <ul className={\"mainMenuOptions\"}>\n                {listItems}\n            </ul>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Main Menu</h2>\n                    {this.options()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MainMenu;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Intro extends Component {\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Welcome to Cross Voting</h2>\n                    <p>Here you can make your own polls, and have your friends vote on them.</p>\n                    <p>You can do all this without making an account, but if you want to make lots of polls you will need to register.</p>\n                    <p>Registering is super easy, you can do it with a couple clicks if you use your Facebook or Google account.</p>\n                    <p>You can also register using traditional means too.</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Intro;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\n// Strings stored in global variables for consistency and production ease. Used in sorting function.\nconst RECENT = 'dateAdded';\nconst LAST_VOTE = 'lastVotedOn';\nconst MOST_VOTES = 'voteCount';\n\nclass PollMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchQuery: \"\",\n            list: [],\n            sortBy: RECENT\n        };\n        this.showList = this.showList.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.getPollList();\n    }\n\n    async getPollList() {\n        try {\n            const listCall = await axios.get('pollList');\n            const list = listCall.data;\n            list.forEach(poll => {\n               poll.dateAdded = new Date(poll.dateAdded);\n               poll.lastVotedOn = new Date(poll.lastVotedOn);\n            });\n            await this.setState({list});\n            this.sortList(this.state.sortBy);\n        } catch (e) {\n            alert('There was an error getting polls from the server, see console for error.');\n            console.log(e);\n        }\n    }\n\n    showList() {\n        let list = this.state.list;\n        if (this.state.searchQuery.length > 0) {\n            try {\n                const regex = new RegExp(this.state.searchQuery, 'gi');\n                list = list.filter(poll => regex.test(poll.question));\n            } catch (e) {\n                console.log('invalid regex');\n            }\n        }\n        return list.map(poll => {\n            return(\n                <div>\n                    <p className={\"pollMenuChoice\"} onClick={() => {\n                        this.props.updateParentState({showingPollId: poll.id});\n                        this.props.showPoll();\n                    }}>{poll.question}</p>\n                </div>\n            );\n        })\n    }\n\n    sortList(category) {\n        const list = this.state.list.sort((a,b) => b[category] - a[category]);\n        this.setState({list, sortBy: category}, this.showList);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    componentDidUpdate() {\n        if (this.props.needsUpdate) {\n            this.props.updateParentState({pollMenuNeedsUpdate: false});\n            this.getPollList();\n        }\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Poll Menu</h2>\n                    <div>\n                        <input\n                            onChange={this.handleChange}\n                            name='searchQuery'\n                            value={this.state.searchQuery}\n                            className={'searchBar'}\n                            type='text'\n                        />\n                        <div className=\"sortBy\">\n                            <p onClick={() => { this.sortList(RECENT) }} className={'clickableText'}>Recently made</p>\n                            <p onClick={() => { this.sortList(LAST_VOTE) }} className={'clickableText'}>Last voted on</p>\n                            <p onClick={() => { this.sortList(MOST_VOTES) }} className={'clickableText'}>Most votes</p>\n                        </div>\n                        {/*<span aria-label={'magnifying glass search icon'} role={'img'} className=\"searchIcon\">🔍</span>*/}\n                        {this.showList()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PollMenu;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass MyPolls extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            errorMessage: \"\",\n            polls: [],\n            previousUsername: \"\"\n        }\n    }\n\n    componentDidMount() {\n        this.getMyPolls();\n    }\n\n    componentDidUpdate() {\n        if (this.state.previousUsername !== this.props.username) {\n            this.setState({previousUsername: this.props.username}, this.getMyPolls);\n        }\n    }\n\n    async getMyPolls() {\n        if (!this.props.authenticated) return;\n        try {\n            const res = await axios.post('/myPolls', {username: this.props.username});\n            const data = res.data;\n            if (data.error) {\n                console.log(data.error);\n                return this.setState({errorMessage: data.message});\n            }\n            // success\n            this.setState({polls: data.polls, errorMessage: \"\"});\n        } catch (e) {\n            this.setState({errorMessage: \"There was a problem connecting, see console for the error\"});\n            console.log(e);\n        }\n    }\n\n    showList() {\n        if (!this.props.authenticated) return (<p className={'red'}>Please log in to see poll list</p>);\n        return this.state.polls.map(poll => {\n            const choosePoll = () => {\n                this.props.updateParentState({showingPollId: poll._id});\n                this.props.showPoll();\n            };\n            return(\n                <p className={'clickableText'} onClick={choosePoll}>{poll.question}</p>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>My Polls</h2>\n                    {this.showList()}\n                    <p className=\"red\">{this.state.errorMessage}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MyPolls;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\nimport axios from \"axios\";\n\nclass CreateNewPoll extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            question: \"\",\n            choices: [\"\", \"\"],\n            submitAttempted: false,\n            submitSucceeded: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.addNewChoice = this.addNewChoice.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    async handleSubmit(e) {\n        await this.setState({submitAttempted: true});\n        const author = this.props.username;\n        const { question, choices } = this.state;\n        axios.post('/poll', {question, choices, author})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem after connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                this.setState({\n                    question: \"\",\n                    choices: [\"\", \"\"],\n                    submitSucceeded: true\n                });\n                this.props.updateParentState({pollMenuNeedsUpdate: true});\n            })\n            .catch((response) => {\n                //handle error\n                this.setState({\n                    submitSucceeded: false,\n                    submitAttempted: false\n                });\n                console.log(response);\n            });\n        e.preventDefault();\n    }\n\n    blankSpace() {\n        return (\n            <div style={{width: 30, height: 30}}> </div>\n        );\n    }\n\n    choices() {\n        // For each choice, generate an input field with label\n        return this.state.choices.map((choice, index) => {\n            const changeChoice = e => {\n                const arrayForUpdate = this.state.choices.slice();\n                arrayForUpdate[index] = e.target.value;\n                this.setState({choices: arrayForUpdate});\n            };\n            const deleteChoice = () => {\n                let arrayForUpdate = this.state.choices.slice();\n                arrayForUpdate.splice(index, 1);\n                this.setState({choices: arrayForUpdate});\n\n            };\n            return(\n                <div key={\"choice_\"+index} className=\"spaceAround\">\n                    <p>Choice {index+1}: </p>\n                    <input onChange={changeChoice} value={this.state.choices[index]} type=\"text\" required/>\n                    {\n                        // If there's more than 2 choices, you can delete one\n                        this.state.choices.length > 2 ?\n                        <p onClick={deleteChoice} className={\"innerX\"}>X</p> :\n                        this.blankSpace()\n                    }\n                </div>\n            )\n        });\n    }\n\n    addNewChoice(e) {\n        this.setState({choices: [...this.state.choices, \"\"]});\n        e.preventDefault();\n    }\n\n    showSubmitStatus() {\n        const message = this.state.submitSucceeded ? \"Poll successfully submitted\" : \"Sending...\";\n        const goBack = () => {\n            this.setState({\n                submitAttempted: false,\n                submitSucceeded: false\n            });\n        };\n        return(\n            <div>\n                <p className={\"red\"}>{message}</p>\n                <p onClick={goBack} className=\"clickableText\">Back</p>\n            </div>\n        );\n    }\n\n    showForm() {\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"spaceAround\">\n                    <p>Question: </p>\n                    <input name={\"question\"} onChange={this.handleChange} type=\"text\" value={this.state.question} required/>\n                    {this.blankSpace()}\n                </div>\n                {this.choices()}\n                <button className={\"addNewChoiceBtn\"} onClick={this.addNewChoice}>Add New Choice</button>\n                <br/>\n                <input className={\"submitBtn\"} type=\"submit\" value=\"Submit Poll\"/>\n            </form>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Create New Poll</h2>\n                    {this.state.submitAttempted ? this.showSubmitStatus() : this.showForm()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CreateNewPoll;","import React, {Component} from 'react';\nimport * as d3 from 'd3';\n\nclass Chart extends Component {\n    componentDidMount() {\n        this.createChart();\n    }\n\n    createChart() {\n        const choiceArr = this.props.choiceArr;\n        const dataForPie = {};\n        this.props.responseData.forEach(datum => {\n            if (datum.count) dataForPie[datum.choice] = datum.count;\n        });\n        const chart = document.getElementById('donut_chart');\n        if (chart) chart.innerHTML = \"\";\n        const width = 350;\n        const height = 250;\n        const margin = 40;\n\n        // The radius of the pieplot is half the width or half the height (smallest one). I substract a bit of margin.\n        const radius = Math.min(width, height) / 2 - margin;\n\n        const svg = d3.select(\"#donut_chart\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n        const data = dataForPie;\n\n        // Colour scale\n        const color = d3.scaleOrdinal()\n            .domain(choiceArr)\n            .range(d3.schemeAccent);\n\n        // Create the pie chart\n        const pie = d3.pie()\n            .sort(null) // Do not sort group by size\n            .value(d => d.value);\n        const data_ready = pie(d3.entries(data));\n\n        // The arc generator\n        const arc = d3.arc()\n            .innerRadius(radius * 0.4)         // This is the size of the donut hole\n            .outerRadius(radius * 0.8);\n\n        // Another arc that won't be drawn. Just for labels positionning\n        const outerArc = d3.arc()\n            .innerRadius(radius * 0.9)\n            .outerRadius(radius * 0.9);\n\n        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n        svg\n            .selectAll('allSlices')\n            .data(data_ready)\n            .enter()\n            .append('path')\n            .attr('d', arc)\n            .attr('fill', d => color(d.data.key))\n            .attr(\"stroke\", \"white\")\n            .style(\"stroke-width\", \"2px\")\n            .style(\"opacity\", 0.7);\n\n        // Add the polylines between chart and labels:\n        svg\n            .selectAll('allPolylines')\n            .data(data_ready)\n            .enter()\n            .append('polyline')\n            .attr(\"stroke\", \"black\")\n            .style(\"fill\", \"none\")\n            .attr(\"stroke-width\", 1)\n            .attr('points', d => {\n                const posA = arc.centroid(d); // line insertion in the slice\n                const posB = outerArc.centroid(d); // line break: we use the other arc generator that has been built only for that\n                const posC = outerArc.centroid(d); // Label position = almost the same as posB\n                const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2; // we need the angle to see if the X position will be at the extreme right or extreme left\n                posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n                return [posA, posB, posC];\n            });\n\n        // Add the polylines between chart and labels:\n        svg\n            .selectAll('allLabels')\n            .data(data_ready)\n            .enter()\n            .append('text')\n            .text( d => d.data.key )\n            .attr('transform', d => {\n                const pos = outerArc.centroid(d);\n                const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n                pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n                return 'translate(' + pos + ')';\n            })\n            .style('text-anchor', d => {\n                const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n                return (midangle < Math.PI ? 'start' : 'end')\n            });\n    }\n\n    render() {\n        return (\n            <div id=\"donut_chart\"/>\n        );\n    }\n}\n\nexport default Chart;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\nimport Chart from './Chart';\n\nclass ShowPoll extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pollId: this.props.pollId,\n            submittedVote: false,\n            pollData: {\n                question: \"\",\n                choices: [],\n                author: \"\"\n            },\n            responseData: []\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.pollId !== this.state.pollId) {\n            this.setState({\n                pollId: this.props.pollId,\n                submittedVote: false\n            }, this.getPollData);\n        }\n    }\n\n    async getPollData() {\n        try {\n            const pollCall = await axios.get('pollData/' + this.props.pollId);\n            const pollData = pollCall.data;\n            this.setState({pollData});\n        } catch (e) {\n            alert(\"There was an error getting the poll data from the server\");\n            console.log(e);\n        }\n    }\n\n    async castVote(choice) {\n        try {\n            let username = this.props.username;\n            if (!this.props.authenticated) {\n                const ip = await axios.get('ip');\n                username = ip.data;\n            }\n            const voteResponse = await axios.post('/castVote', {choice, id: this.props.pollId, username});\n            this.setState({\n                responseData: voteResponse.data,\n                submittedVote: true\n            });\n            this.props.updateParentState({pollMenuNeedsUpdate: true});\n        } catch (e) {\n            alert(\"There was an error getting information to or from the server. Please check console for error.\");\n            console.log(e);\n        }\n\n    }\n\n    showChoiceBtns() {\n        let choices = this.state.pollData ?\n            this.state.pollData.choices.map(choice =>\n                <button\n                    className={\"choiceBtn\"}\n                    onClick={() => this.castVote(choice)}>\n                    {choice}\n                </button>) :\n            \"Could not connect to server.\";\n        return(\n            <div className={\"userChoices\"}>\n                {choices}\n            </div>\n        );\n    }\n\n    showResults() {\n        let choiceArr = [];\n        const choiceCount = this.state.responseData.map(datum => {\n            const {choice, count} = datum;\n            if (count > 0) choiceArr.push(choice);\n            return(<p>{choice}: {count} votes</p>)\n        });\n        return(\n            <div>\n                <h3>Results:</h3>\n                <Chart choiceArr={choiceArr} responseData={this.state.responseData}/>\n                {choiceCount}\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>{this.state.pollData.question}</h2>\n                    {this.state.submittedVote ? this.showResults() : this.showChoiceBtns()}\n                    <p>Created By: {this.state.pollData.author || \"Anonymous\"}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ShowPoll;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            email: \"\",\n            submitted: false,\n            errorMessage: \"\"\n        };\n        this.successMessage = \"Registered successfully, please check email for activation link.\";\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmit(e) {\n        const { username, password, email } = this.state;\n        axios.post('/register', {username, password, email})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                // problem with information (email already in use etc)\n                if (response.data !== this.successMessage) {\n                    return this.setState({errorMessage: response.data}, () => {\n                        setTimeout(() => {\n                            this.setState({errorMessage: \"\"});\n                        }, 5000);\n                    });\n                }\n                // Successful registration\n                this.setState({\n                    username: \"\",\n                    password: \"\",\n                    email: \"\",\n                    submitted: true,\n                    errorMessage: \"\",\n                });\n            })\n            .catch((response) => {\n                //handle error\n                alert(\"There was a problem connecting to the server, see console for more information\");\n                return console.log(response);\n            });\n        e.preventDefault();\n    }\n\n    registrationForm() {\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"spaceAround\">\n                    <p>Username:</p>\n                    <input\n                        onChange={this.handleChange}\n                        name=\"username\"\n                        type=\"text\"\n                        id=\"registeringUsername\"\n                        value={this.state.username}\n                        required\n                    />\n                </div>\n                <div className=\"spaceAround\">\n                    <p>Password:</p>\n                    <input\n                        onChange={this.handleChange}\n                        name=\"password\"\n                        type=\"password\"\n                        id=\"registeringPassword\"\n                        value={this.state.password}\n                        required\n                    />\n                </div>\n                <div className=\"spaceAround\">\n                    <p>Email:</p>\n                    <input\n                        onChange={this.handleChange}\n                        name=\"email\"\n                        type=\"email\"\n                        id=\"registeringEmail\"\n                        value={this.state.email}\n                        required\n                    />\n                </div>\n                <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\n                <p className={\"red\"}>{this.state.errorMessage}</p>\n            </form>\n        );\n    }\n\n    showSuccess() {\n        return(\n            <div>\n                <p>{this.successMessage}</p>\n                <p className={\"red\"}>You may need to check the spam folder.</p>\n                <p className={\"clickableText\"} onClick={() => {this.setState({submitted: false})}}>Back</p>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Register</h2>\n                    {this.state.submitted ? this.showSuccess() : this.registrationForm()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Register;","import React, {Component} from 'react';\nimport axios from \"axios\";\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            failedMessage: \"\"\n        };\n        // this.loginTimeout = null;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmit(e) {\n        this.props.updateParentState({attemptedLogin: true});\n        // this.loginTimeout = setTimeout(() => {\n        //\n        // }, 10000);\n        this.setState({failedMessage: \"\"});\n        const { username, password } = this.state;\n        axios.post('/login', {username, password})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem after connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                if (response.data.loggedIn) {\n                    // update log in status of parent\n                    this.props.updateParentState({\n                        authenticated: true,\n                        username: response.data.message\n                    });\n                    // Must clear fields for cyber-security!\n                    this.setState({\n                        username: \"\",\n                        password: \"\"\n                    });\n                    // close widget after 2 seconds\n                    this.props.closeRegister();\n                    setTimeout(this.props.close, 2000);\n                } else {\n                    this.setState({failedMessage: response.data.message});\n                    this.props.updateParentState({attemptedLogin: false});\n                }\n            })\n            .catch((response) => {\n                //handle error\n                console.log(response);\n                this.setState({\n                    failedMessage: \"Trouble connecting to server. Potentially from loss of internet connection. See console for more details\"\n                });\n                this.props.updateParentState({attemptedLogin: false});\n            });\n        e.preventDefault();\n    }\n\n    attemptedLogin() {\n        const message = this.props.authenticated ? \"You have logged in successfully!\" : \"Please wait...\";\n        return(\n            <div>\n                <p>{message}</p>\n            </div>\n        );\n    }\n\n    loginForm() {\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"spaceAround\">\n                        <p>Username:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"username\"\n                            type=\"text\"\n                            id=\"loginUsername\"\n                            value={this.state.username}\n                            required\n                        />\n                    </div>\n                    <div className=\"spaceAround\">\n                        <p>Password:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"password\"\n                            type=\"password\"\n                            id=\"loginPassword\"\n                            value={this.state.password}\n                            required\n                        />\n                    </div>\n                    <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\n                </form>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Login</h2>\n                    {this.props.attemptedLogin ? this.attemptedLogin() : this.loginForm()}\n                    <p className={\"red\"}>{this.state.failedMessage}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;","// Dependencies\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './stylesheets/App.css';\n// import VotingImg from './images/voting.jpg';\n\n// My Modules\nimport AuthenticationSegment from './components/AuthenticationSegment';\nimport MainMenu from './components/MainMenu';\nimport Intro from './components/Intro';\nimport PollMenu from './components/PollMenu';\nimport MyPolls from './components/MyPolls';\nimport CreateNewPoll from './components/CreateNewPoll';\nimport ShowPoll from './components/ShowPoll';\nimport Register from './components/Register';\nimport Login from './components/Login';\n\n// Global variables for string-references of widgets, for consistency and efficiency in development\nconst INTRO = \"Intro\";\nconst MAIN_MENU = \"Main Menu\";\nconst POLL_MENU = \"Poll Menu\";\nconst MY_POLLS = \"My Polls\";\nconst REGISTER = \"Register\";\nconst LOGIN = \"Login\";\nconst CREATE_NEW_POLL = \"Create New Poll\";\nconst SHOW_POLL = \"Show Poll\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            authenticated: false,\n            username: \"\",\n            visibleWidgets: [INTRO, POLL_MENU],\n            attemptedLogin: false,\n            showingPollId: \"\",\n            pollMenuNeedsUpdate: false\n        };\n        this.closeWidget = this.closeWidget.bind(this);\n        this.showWidget = this.showWidget.bind(this);\n        this.updateParentState = this.updateParentState.bind(this);\n        this.bringMenuToFront = this.bringMenuToFront.bind(this);\n    }\n\n    componentDidMount() {\n        // Check if user is already logged in to display components accordingly (i.e. Welcome message)\n        axios.get('/whoami')\n            .then(res => {\n                if (res.data) {\n                    this.setState({authenticated: true, username: res.data});\n                }\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    updateParentState(stateObject) {\n        this.setState(stateObject);\n    }\n\n    closeWidget(widgetName) {\n        this.setState({visibleWidgets: this.state.visibleWidgets.filter(widget => widget !== widgetName)});\n    }\n\n    showWidget(widgetName) {\n        const otherWidgets = this.state.visibleWidgets.filter(widget => widget !== MAIN_MENU);\n        const updateArray = [widgetName, ...otherWidgets];\n        // put main menu to left if open\n        const containsMenu = this.state.visibleWidgets.includes(MAIN_MENU);\n        if (containsMenu) updateArray.unshift(MAIN_MENU);\n        this.setState({visibleWidgets: updateArray});\n    }\n\n    bringMenuToFront() {\n        const otherWidgets = this.state.visibleWidgets.filter(widget => widget !== MAIN_MENU);\n        this.setState({visibleWidgets: [MAIN_MENU, ...otherWidgets]});\n    }\n\n    render() {\n        // Everything in <main> is divided into 'widgets'\n        // Each widget displays according to a particular order, if at all\n        // The two function expressions below determine whether it is showing, and what order it is if so\n        // These are passed as props to each component, or 'widget'\n        const orderOf = widgetName => this.state.visibleWidgets.indexOf(widgetName);\n        const showing = widgetName => this.state.visibleWidgets.includes(widgetName);\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <p className={\"hamburgerIcon\"} onClick={() => { this.showWidget(MAIN_MENU) }}>&#9776;</p>\n                    <h1 id={\"mainTitle\"}>Voting App</h1>\n                    <AuthenticationSegment\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        showRegister={() => this.showWidget(REGISTER)}\n                        showLogin={() => this.showWidget(LOGIN)}\n                        updateParentState={this.updateParentState}\n                    />\n                </header>\n                <main>\n                    <MainMenu\n                        widgets={[INTRO, POLL_MENU, MY_POLLS, CREATE_NEW_POLL, REGISTER, LOGIN]}\n                        order={orderOf(MAIN_MENU)}\n                        showing={showing(MAIN_MENU)}\n                        close={() => {this.closeWidget(MAIN_MENU)}}\n                        visibleWidgets={this.state.visibleWidgets}\n                        showWidget={this.showWidget}\n                        closeWidget={this.closeWidget}\n                        bringMenuToFront={this.bringMenuToFront}\n                        authenticated={this.state.authenticated}\n                        id={MAIN_MENU.replace(/\\s/g, \"\")}\n                    />\n                    <Intro\n                        order={orderOf(INTRO)}\n                        showing={showing(INTRO)}\n                        close={() => {this.closeWidget(INTRO)}}\n                        id={INTRO.replace(/\\s/g, \"\")}\n                    />\n                    <PollMenu\n                        order={orderOf(POLL_MENU)}\n                        showing={showing(POLL_MENU)}\n                        close={() => {this.closeWidget(POLL_MENU)}}\n                        showPoll={() => this.showWidget(SHOW_POLL)}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        needsUpdate={this.state.pollMenuNeedsUpdate}\n                        id={POLL_MENU.replace(/\\s/g, \"\")}\n                    />\n                    <MyPolls\n                        order={orderOf(MY_POLLS)}\n                        showing={showing(MY_POLLS)}\n                        close={() => {this.closeWidget(MY_POLLS)}}\n                        showPoll={() => this.showWidget(SHOW_POLL)}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        id={MY_POLLS.replace(/\\s/g, \"\")}\n                    />\n                    <CreateNewPoll\n                        order={orderOf(CREATE_NEW_POLL)}\n                        showing={showing(CREATE_NEW_POLL)}\n                        close={() => {this.closeWidget(CREATE_NEW_POLL)}}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        id={CREATE_NEW_POLL.replace(/\\s/g, \"\")}\n                    />\n                    <ShowPoll\n                        order={orderOf(SHOW_POLL)}\n                        showing={showing(SHOW_POLL)}\n                        close={() => {this.closeWidget(SHOW_POLL)}}\n                        pollId={this.state.showingPollId}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        id={SHOW_POLL.replace(/\\s/g, \"\")}\n                    />\n                    <Register\n                        order={orderOf(REGISTER)}\n                        showing={showing(REGISTER)}\n                        close={() => {this.closeWidget(REGISTER)}}\n                        authenticated={this.state.authenticated}\n                        id={REGISTER.replace(/\\s/g, \"\")}\n                    />\n                    <Login\n                        order={orderOf(LOGIN)}\n                        showing={showing(LOGIN)}\n                        close={() => {this.closeWidget(LOGIN)}}\n                        closeRegister={() => {this.closeWidget(REGISTER)}}\n                        authenticated={this.state.authenticated}\n                        attemptedLogin={this.state.attemptedLogin}\n                        updateParentState={this.updateParentState}\n                        id={LOGIN.replace(/\\s/g, \"\")}\n                    />\n                    <p className={\"noWidgetMsg\"} onClick={() => { this.showWidget(MAIN_MENU) }}>\n                        {this.state.visibleWidgets.length === 0 ? \"Click here or ☰ for the menu\" : \"\"}\n                    </p>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = (order, showing) => {\n    return {\n        order,\n        display: (showing ? \"block\" : \"none\"),\n        width: 400,\n        animation: `appear 1s ease-out ${order*100}ms forwards`\n    };\n};"],"sourceRoot":""}