{"version":3,"sources":["components/AuthenticationSegment.js","components/CloseWidgetBtn.js","components/MainMenu.js","components/Intro.js","components/PollMenu.js","components/CreateNewPoll.js","components/ShowPoll.js","components/Register.js","components/Login.js","App.js","serviceWorker.js","index.js","components/widgetStyle.js"],"names":["AuthenticationSegment","logout","axios","get","then","res","console","log","data","_this","props","updateParentState","authenticated","username","attemptedLogin","catch","e","alert","react_default","a","createElement","className","onClick","this","showRegister","showLogin","notAuthenticated","Component","CloseWidgetBtn","close","MainMenu","visibleOptions","Object","toConsumableArray","widgets","filter","option","listItems","map","widget","widgetShowing","visibleWidgets","includes","liStyle","textShadow","cursor","toggleWidget","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","closeWidget","showWidget","bringMenuToFront","stop","apply","arguments","key","style","id","widgetStyle","order","showing","components_CloseWidgetBtn","options","Intro","PollMenu","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchQuery","list","showList","bind","assertThisInitialized","handleChange","getPollList","listCall","forEach","poll","dateAdded","Date","lastVotedOn","setState","t0","_this2","length","regex","RegExp","test","question","showingPollId","showPoll","category","sort","b","defineProperty","target","name","value","needsUpdate","pollMenuNeedsUpdate","sortList","_this3","onChange","type","aria-label","role","CreateNewPoll","choices","submitAttempted","submitSucceeded","handleSubmit","addNewChoice","author","post","response","status","preventDefault","width","height","choice","index","arrayForUpdate","slice","required","splice","blankSpace","concat","_this4","message","onSubmit","showSubmitStatus","showForm","ShowPoll","pollId","submittedVote","pollData","responseData","getPollData","pollCall","ip","voteResponse","_context2","castVote","choiceArr","choiceCount","datum","count","push","dataForPie","chart","document","getElementById","innerHTML","radius","Math","min","svg","d3","append","attr","color","domain","range","data_ready","d","pie","arc","innerRadius","outerRadius","outerArc","selectAll","enter","posA","centroid","posB","posC","midangle","startAngle","endAngle","PI","text","pos","showResults","showChoiceBtns","Register","password","email","submitted","errorMessage","successMessage","_this$state","setTimeout","showSuccess","registrationForm","Login","failedMessage","loggedIn","loginForm","INTRO","MAIN_MENU","POLL_MENU","App","stateObject","widgetName","containsMenu","otherWidgets","updateArray","unshift","orderOf","indexOf","components_AuthenticationSegment","components_MainMenu","replace","components_Intro","components_PollMenu","components_CreateNewPoll","components_ShowPoll","components_Register","components_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister","module","exports","display","animation"],"mappings":"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","file":"static/js/main.e21adfb3.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nclass AuthenticationSegment extends Component {\r\n    logout = () => {\r\n        axios.get('/logout')\r\n            .then(res => {\r\n                console.log(res.data);\r\n                // this.props.updateAuthenticationStatus(false, \"\");\r\n                this.props.updateParentState({\r\n                    authenticated: false,\r\n                    username: \"\",\r\n                    attemptedLogin: false\r\n                });\r\n            })\r\n            .catch(e => {\r\n                alert(\"There was an error connecting, please check console for the error\");\r\n                console.log(e);\r\n            });\r\n    };\r\n\r\n    notAuthenticated() {\r\n        return(\r\n            <div className=\"authenticationLinks\">\r\n                <p className=\"clickableText\" onClick={this.props.showRegister}>Register</p>\r\n                <p> || </p>\r\n                <p className=\"clickableText\" onClick={this.props.showLogin}>Log In</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    authenticated() {\r\n        return(\r\n            <div>\r\n                <p>Welcome {this.props.username}</p>\r\n                <p className=\"clickableText\" onClick={this.logout}>Sign Out</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.authenticated ? this.authenticated() : this.notAuthenticated()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AuthenticationSegment;","import React, {Component} from 'react';\r\n\r\nclass CloseWidgetBtn extends Component {\r\n    render() {\r\n        return (\r\n            <div className={\"closeWidgetBtn\"}>\r\n                <p onClick={this.props.close} className={\"innerX\"}>X</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CloseWidgetBtn;","import React, {Component} from 'react';\r\n\r\nimport CloseWidgetBtn from './CloseWidgetBtn';\r\nimport widgetStyle from './widgetStyle';\r\n\r\nclass MainMenu extends Component {\r\n    options() {\r\n        let visibleOptions = [...this.props.widgets];\r\n        if (this.props.authenticated) {\r\n            visibleOptions = visibleOptions.filter(option => option !== \"Login\" && option !== \"Register\");\r\n        }\r\n        let listItems = visibleOptions.map(widget => {\r\n            const widgetShowing = this.props.visibleWidgets.includes(widget);\r\n            const liStyle = {\r\n                textShadow: widgetShowing ? \"0 0 2px gold\" : \"none\",\r\n                cursor: \"pointer\"\r\n            };\r\n            const toggleWidget = async () => {\r\n                await widgetShowing ?\r\n                    this.props.closeWidget(widget) :\r\n                    this.props.showWidget(widget);\r\n                this.props.bringMenuToFront();\r\n            };\r\n            return (\r\n                <li key={widget} onClick={toggleWidget} style={liStyle}>{widget}</li>\r\n            );\r\n        });\r\n        return(\r\n            <ul className={\"mainMenuOptions\"}>\r\n                {listItems}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\r\n                <div className=\"scrollable\">\r\n                    <CloseWidgetBtn close={this.props.close}/>\r\n                    <h2>Main Menu</h2>\r\n                    {this.options()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainMenu;","import React, {Component} from 'react';\r\n\r\nimport CloseWidgetBtn from './CloseWidgetBtn';\r\nimport widgetStyle from './widgetStyle';\r\n\r\nclass Intro extends Component {\r\n    render() {\r\n        return (\r\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\r\n                <div className=\"scrollable\">\r\n                    <CloseWidgetBtn close={this.props.close}/>\r\n                    <h2>Welcome to Cross Voting</h2>\r\n                    <p>Here you can make your own polls, and have your friends vote on them.</p>\r\n                    <p>You can do all this without making an account, but if you want to make lots of polls you will need to register.</p>\r\n                    <p>Registering is super easy, you can do it with a couple clicks if you use your Facebook or Google account.</p>\r\n                    <p>You can also register using traditional means too.</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Intro;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport CloseWidgetBtn from './CloseWidgetBtn';\r\nimport widgetStyle from './widgetStyle';\r\n\r\n// Strings stored in global variables for consistency and production ease. Used in sorting function.\r\nconst RECENT = 'dateAdded';\r\nconst LAST_VOTE = 'lastVotedOn';\r\nconst MOST_VOTES = 'voteCount';\r\n\r\nclass PollMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchQuery: \"\",\r\n            list: []\r\n        };\r\n        this.showList = this.showList.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getPollList();\r\n    }\r\n\r\n    async getPollList() {\r\n        try {\r\n            const listCall = await axios.get('pollList');\r\n            const list = listCall.data;\r\n            list.forEach(poll => {\r\n               poll.dateAdded = new Date(poll.dateAdded);\r\n               poll.lastVotedOn = new Date(poll.lastVotedOn);\r\n            });\r\n            this.setState({list});\r\n        } catch (e) {\r\n            alert('There was an error getting polls from the server, see console for error.');\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    showList() {\r\n        let list = this.state.list;\r\n        if (this.state.searchQuery.length > 0) {\r\n            try {\r\n                const regex = new RegExp(this.state.searchQuery, 'gi');\r\n                list = list.filter(poll => regex.test(poll.question));\r\n            } catch (e) {\r\n                console.log('invalid regex');\r\n            }\r\n        }\r\n        return list.map(poll => {\r\n            return(\r\n                <div>\r\n                    <p className={\"pollMenuChoice\"} onClick={() => {\r\n                        this.props.updateParentState({showingPollId: poll.id});\r\n                        this.props.showPoll();\r\n                    }}>{poll.question}</p>\r\n                </div>\r\n            );\r\n        })\r\n    }\r\n\r\n    sortList(category) {\r\n        const list = this.state.list.sort((a,b) => b[category] - a[category]);\r\n        this.setState({list}, this.showList);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.needsUpdate) {\r\n            this.props.updateParentState({pollMenuNeedsUpdate: false});\r\n            this.sortList();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\r\n                <div className=\"scrollable\">\r\n                    <CloseWidgetBtn close={this.props.close}/>\r\n                    <h2>Poll Menu</h2>\r\n                    <div>\r\n                        <input\r\n                            onChange={this.handleChange}\r\n                            name='searchQuery'\r\n                            value={this.state.searchQuery}\r\n                            className={'searchBar'}\r\n                            type='text'\r\n                        />\r\n                        <div className=\"sortBy\">\r\n                            <p onClick={() => { this.sortList(RECENT) }} className={'clickableText'}>Recently made</p>\r\n                            <p onClick={() => { this.sortList(LAST_VOTE) }} className={'clickableText'}>Last voted on</p>\r\n                            <p onClick={() => { this.sortList(MOST_VOTES) }} className={'clickableText'}>Most votes</p>\r\n                        </div>\r\n                        <span aria-label={'magnifying glass search icon'} role={'img'} className=\"searchIcon\">🔍</span>\r\n                        {this.showList()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PollMenu;","import React, {Component} from 'react';\r\n\r\nimport CloseWidgetBtn from './CloseWidgetBtn';\r\nimport widgetStyle from './widgetStyle';\r\nimport axios from \"axios\";\r\n\r\nclass CreateNewPoll extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            question: \"\",\r\n            choices: [\"\", \"\"],\r\n            submitAttempted: false,\r\n            submitSucceeded: false\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.addNewChoice = this.addNewChoice.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    async handleSubmit(e) {\r\n        await this.setState({submitAttempted: true});\r\n        const author = this.props.username;\r\n        const { question, choices } = this.state;\r\n        axios.post('/poll', {question, choices, author})\r\n            .then((response) => {\r\n                //handle success\r\n                if (response.status !== 200) {\r\n                    alert(\"There was a problem after connecting to the server, see console for more information\");\r\n                    return console.log(response);\r\n                }\r\n                this.setState({\r\n                    question: \"\",\r\n                    choices: [\"\", \"\"],\r\n                    submitSucceeded: true\r\n                });\r\n                this.props.updateParentState({pollMenuNeedsUpdate: true});\r\n            })\r\n            .catch((response) => {\r\n                //handle error\r\n                this.setState({\r\n                    submitSucceeded: false,\r\n                    submitAttempted: false\r\n                });\r\n                console.log(response);\r\n            });\r\n        e.preventDefault();\r\n    }\r\n\r\n    blankSpace() {\r\n        return (\r\n            <div style={{width: 30, height: 30}}> </div>\r\n        );\r\n    }\r\n\r\n    choices() {\r\n        // For each choice, generate an input field with label\r\n        return this.state.choices.map((choice, index) => {\r\n            const changeChoice = e => {\r\n                const arrayForUpdate = this.state.choices.slice();\r\n                arrayForUpdate[index] = e.target.value;\r\n                this.setState({choices: arrayForUpdate});\r\n            };\r\n            const deleteChoice = () => {\r\n                let arrayForUpdate = this.state.choices.slice();\r\n                arrayForUpdate.splice(index, 1);\r\n                this.setState({choices: arrayForUpdate});\r\n\r\n            };\r\n            return(\r\n                <div key={\"choice_\"+index} className=\"spaceAround\">\r\n                    <p>Choice {index+1}: </p>\r\n                    <input onChange={changeChoice} value={this.state.choices[index]} type=\"text\" required/>\r\n                    {\r\n                        // If there's more than 2 choices, you can delete one\r\n                        this.state.choices.length > 2 ?\r\n                        <p onClick={deleteChoice} className={\"innerX\"}>X</p> :\r\n                        this.blankSpace()\r\n                    }\r\n                </div>\r\n            )\r\n        });\r\n    }\r\n\r\n    addNewChoice(e) {\r\n        this.setState({choices: [...this.state.choices, \"\"]});\r\n        e.preventDefault();\r\n    }\r\n\r\n    showSubmitStatus() {\r\n        const message = this.state.submitSucceeded ? \"Poll successfully submitted\" : \"Sending...\";\r\n        const goBack = () => {\r\n            this.setState({\r\n                submitAttempted: false,\r\n                submitSucceeded: false\r\n            });\r\n        };\r\n        return(\r\n            <div>\r\n                <p className={\"red\"}>{message}</p>\r\n                <p onClick={goBack} className=\"clickableText\">Back</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showForm() {\r\n        return(\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div className=\"spaceAround\">\r\n                    <p>Question: </p>\r\n                    <input name={\"question\"} onChange={this.handleChange} type=\"text\" value={this.state.question} required/>\r\n                    {this.blankSpace()}\r\n                </div>\r\n                {this.choices()}\r\n                <button className={\"addNewChoiceBtn\"} onClick={this.addNewChoice}>Add New Choice</button>\r\n                <br/>\r\n                <input className={\"submitBtn\"} type=\"submit\" value=\"Submit Poll\"/>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\r\n                <div className=\"scrollable\">\r\n                    <CloseWidgetBtn close={this.props.close}/>\r\n                    <h2>Create New Poll</h2>\r\n                    {this.state.submitAttempted ? this.showSubmitStatus() : this.showForm()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateNewPoll;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport * as d3 from 'd3';\r\n\r\nimport CloseWidgetBtn from './CloseWidgetBtn';\r\nimport widgetStyle from './widgetStyle';\r\n\r\nclass ShowPoll extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pollId: this.props.pollId,\r\n            submittedVote: false,\r\n            pollData: {\r\n                question: \"\",\r\n                choices: [],\r\n                author: \"\"\r\n            },\r\n            responseData: []\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.pollId !== this.state.pollId) {\r\n            this.setState({\r\n                pollId: this.props.pollId,\r\n                submittedVote: false\r\n            }, this.getPollData);\r\n        }\r\n    }\r\n\r\n    async getPollData() {\r\n        try {\r\n            const pollCall = await axios.get('pollData/' + this.props.pollId);\r\n            const pollData = pollCall.data;\r\n            this.setState({pollData});\r\n        } catch (e) {\r\n            alert(\"There was an error getting the poll data from the server\");\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    async castVote(choice) {\r\n        try {\r\n            let username = this.props.username;\r\n            if (!this.props.authenticated) {\r\n                const ip = await axios.get('ip');\r\n                username = ip.data;\r\n            }\r\n            const voteResponse = await axios.post('/castVote', {choice, id: this.props.pollId, username});\r\n            this.setState({\r\n                responseData: voteResponse.data,\r\n                submittedVote: true\r\n            });\r\n            this.props.updateParentState({pollMenuNeedsUpdate: true});\r\n        } catch (e) {\r\n            alert(\"There was an error getting information to or from the server. Please check console for error.\");\r\n            console.log(e);\r\n        }\r\n\r\n    }\r\n\r\n    showChoiceBtns() {\r\n        const choices = this.state.pollData.choices.map(choice => <button className={\"choiceBtn\"} onClick={() => this.castVote(choice)}>{choice}</button>);\r\n        return(\r\n            <div className={\"userChoices\"}>\r\n                {choices}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showResults() {\r\n        let choiceArr = [];\r\n        const choiceCount = this.state.responseData.map(datum => {\r\n            const {choice, count} = datum;\r\n            choiceArr.push(choice);\r\n            return(<p>{choice}: {count} votes</p>)\r\n        });\r\n        // D3 START\r\n        console.log(this.state.responseData);\r\n        const dataForPie = {};\r\n        this.state.responseData.forEach(datum => {\r\n           dataForPie[datum.choice] = datum.count;\r\n        });\r\n        const chart = document.getElementById('donut_chart');\r\n        if (chart) chart.innerHTML = \"\";\r\n        const width = 250;\r\n        const height = 250;\r\n        const margin = 40;\r\n\r\n// The radius of the pieplot is half the width or half the height (smallest one). I substract a bit of margin.\r\n        var radius = Math.min(width, height) / 2 - margin;\r\n\r\n        var svg = d3.select(\"#donut_chart\")\r\n            .append(\"svg\")\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\r\n\r\n// Create dummy data\r\n        var data = dataForPie;\r\n        // var data = {a: 9, b: 20, c:30, d:8, e:12, f:3, g:7, h:14};\r\n\r\n// set the color scale\r\n        var color = d3.scaleOrdinal()\r\n            .domain(choiceArr)\r\n            .range(d3.schemeDark2);\r\n\r\n// Compute the position of each group on the pie:\r\n        var pie = d3.pie()\r\n            .sort(null) // Do not sort group by size\r\n            .value(function(d) {return d.value; });\r\n        var data_ready = pie(d3.entries(data));\r\n\r\n// The arc generator\r\n        var arc = d3.arc()\r\n            .innerRadius(radius * 0.5)         // This is the size of the donut hole\r\n            .outerRadius(radius * 0.8);\r\n\r\n// Another arc that won't be drawn. Just for labels positionning\r\n        var outerArc = d3.arc()\r\n            .innerRadius(radius * 0.9)\r\n            .outerRadius(radius * 0.9);\r\n\r\n// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\r\n        svg\r\n            .selectAll('allSlices')\r\n            .data(data_ready)\r\n            .enter()\r\n            .append('path')\r\n            .attr('d', arc)\r\n            .attr('fill', function(d){ return(color(d.data.key)) })\r\n            .attr(\"stroke\", \"white\")\r\n            .style(\"stroke-width\", \"2px\")\r\n            .style(\"opacity\", 0.7);\r\n\r\n// Add the polylines between chart and labels:\r\n        svg\r\n            .selectAll('allPolylines')\r\n            .data(data_ready)\r\n            .enter()\r\n            .append('polyline')\r\n            .attr(\"stroke\", \"black\")\r\n            .style(\"fill\", \"none\")\r\n            .attr(\"stroke-width\", 1)\r\n            .attr('points', function(d) {\r\n                var posA = arc.centroid(d); // line insertion in the slice\r\n                var posB = outerArc.centroid(d); // line break: we use the other arc generator that has been built only for that\r\n                var posC = outerArc.centroid(d); // Label position = almost the same as posB\r\n                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2; // we need the angle to see if the X position will be at the extreme right or extreme left\r\n                posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\r\n                return [posA, posB, posC]\r\n            });\r\n\r\n// Add the polylines between chart and labels:\r\n        svg\r\n            .selectAll('allLabels')\r\n            .data(data_ready)\r\n            .enter()\r\n            .append('text')\r\n            .text( function(d) { console.log(d.data.key) ; return d.data.key } )\r\n            .attr('transform', function(d) {\r\n                var pos = outerArc.centroid(d);\r\n                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n                pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\r\n                return 'translate(' + pos + ')';\r\n            })\r\n            .style('text-anchor', function(d) {\r\n                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n                return (midangle < Math.PI ? 'start' : 'end')\r\n            });\r\n        // END\r\n        return(\r\n            <div>\r\n                <h3>Results:</h3>\r\n                <div id=\"donut_chart\"></div>\r\n                {choiceCount}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\r\n                <div className=\"scrollable\">\r\n                    <CloseWidgetBtn close={this.props.close}/>\r\n                    <h2>{this.state.pollData.question}</h2>\r\n                    {this.state.submittedVote ? this.showResults() : this.showChoiceBtns()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShowPoll;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport CloseWidgetBtn from './CloseWidgetBtn';\r\nimport widgetStyle from './widgetStyle';\r\n\r\nclass Register extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n            email: \"\",\r\n            submitted: false,\r\n            errorMessage: \"\"\r\n        };\r\n        this.successMessage = \"Registered successfully, please check email for activation link.\";\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        const { username, password, email } = this.state;\r\n        axios.post('/register', {username, password, email})\r\n            .then((response) => {\r\n                //handle success\r\n                if (response.status !== 200) {\r\n                    alert(\"There was a problem connecting to the server, see console for more information\");\r\n                    return console.log(response);\r\n                }\r\n                // problem with information (email already in use etc)\r\n                if (response.data !== this.successMessage) {\r\n                    return this.setState({errorMessage: response.data}, () => {\r\n                        setTimeout(() => {\r\n                            this.setState({errorMessage: \"\"});\r\n                        }, 5000);\r\n                    });\r\n                }\r\n                // Successful registration\r\n                this.setState({\r\n                    username: \"\",\r\n                    password: \"\",\r\n                    email: \"\",\r\n                    submitted: true,\r\n                    errorMessage: \"\",\r\n                });\r\n            })\r\n            .catch((response) => {\r\n                //handle error\r\n                alert(\"There was a problem connecting to the server, see console for more information\");\r\n                return console.log(response);\r\n            });\r\n        e.preventDefault();\r\n    }\r\n\r\n    registrationForm() {\r\n        return(\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div className=\"spaceAround\">\r\n                    <p>Username:</p>\r\n                    <input\r\n                        onChange={this.handleChange}\r\n                        name=\"username\"\r\n                        type=\"text\"\r\n                        id=\"registeringUsername\"\r\n                        value={this.state.username}\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className=\"spaceAround\">\r\n                    <p>Password:</p>\r\n                    <input\r\n                        onChange={this.handleChange}\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        id=\"registeringPassword\"\r\n                        value={this.state.password}\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className=\"spaceAround\">\r\n                    <p>Email:</p>\r\n                    <input\r\n                        onChange={this.handleChange}\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        id=\"registeringEmail\"\r\n                        value={this.state.email}\r\n                        required\r\n                    />\r\n                </div>\r\n                <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\r\n                <p className={\"red\"}>{this.state.errorMessage}</p>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    showSuccess() {\r\n        return(\r\n            <div>\r\n                <p>{this.successMessage}</p>\r\n                <p className={\"red\"}>You may need to check the spam folder.</p>\r\n                <p className={\"clickableText\"} onClick={() => {this.setState({submitted: false})}}>Back</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\r\n                <div className=\"scrollable\">\r\n                    <CloseWidgetBtn close={this.props.close}/>\r\n                    <h2>Register</h2>\r\n                    {this.state.submitted ? this.showSuccess() : this.registrationForm()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;","import React, {Component} from 'react';\r\nimport axios from \"axios\";\r\n\r\nimport CloseWidgetBtn from './CloseWidgetBtn';\r\nimport widgetStyle from './widgetStyle';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n            failedMessage: \"\"\r\n        };\r\n        // this.loginTimeout = null;\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        this.props.updateParentState({attemptedLogin: true});\r\n        // this.loginTimeout = setTimeout(() => {\r\n        //\r\n        // }, 10000);\r\n        this.setState({failedMessage: \"\"});\r\n        const { username, password } = this.state;\r\n        axios.post('/login', {username, password})\r\n            .then((response) => {\r\n                //handle success\r\n                if (response.status !== 200) {\r\n                    alert(\"There was a problem after connecting to the server, see console for more information\");\r\n                    return console.log(response);\r\n                }\r\n                if (response.data.loggedIn) {\r\n                    // update log in status of parent\r\n                    this.props.updateParentState({\r\n                        authenticated: true,\r\n                        username: response.data.message\r\n                    });\r\n                    // Must clear fields for cyber-security!\r\n                    this.setState({\r\n                        username: \"\",\r\n                        password: \"\"\r\n                    });\r\n                    // close widget after 2 seconds\r\n                    setTimeout(this.props.close, 2000);\r\n                } else {\r\n                    this.setState({failedMessage: response.data.message});\r\n                    this.props.updateParentState({attemptedLogin: false});\r\n                }\r\n            })\r\n            .catch((response) => {\r\n                //handle error\r\n                console.log(response);\r\n                this.setState({\r\n                    failedMessage: \"Trouble connecting to server. Potentially from loss of internet connection. See console for more details\"\r\n                });\r\n                this.props.updateParentState({attemptedLogin: false});\r\n            });\r\n        e.preventDefault();\r\n    }\r\n\r\n    attemptedLogin() {\r\n        const message = this.props.authenticated ? \"You have logged in successfully!\" : \"Please wait...\";\r\n        return(\r\n            <div>\r\n                <p>{message}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    loginForm() {\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"spaceAround\">\r\n                        <p>Username:</p>\r\n                        <input\r\n                            onChange={this.handleChange}\r\n                            name=\"username\"\r\n                            type=\"text\"\r\n                            id=\"loginUsername\"\r\n                            value={this.state.username}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"spaceAround\">\r\n                        <p>Password:</p>\r\n                        <input\r\n                            onChange={this.handleChange}\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            id=\"loginPassword\"\r\n                            value={this.state.password}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\r\n                <div className=\"scrollable\">\r\n                    <CloseWidgetBtn close={this.props.close}/>\r\n                    <h2>Login</h2>\r\n                    {this.props.attemptedLogin ? this.attemptedLogin() : this.loginForm()}\r\n                    <p className={\"red\"}>{this.state.failedMessage}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","// Dependencies\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './stylesheets/App.css';\r\n// import VotingImg from './images/voting.jpg';\r\n\r\n// My Modules\r\nimport AuthenticationSegment from './components/AuthenticationSegment';\r\nimport MainMenu from './components/MainMenu';\r\nimport Intro from './components/Intro';\r\nimport PollMenu from './components/PollMenu';\r\nimport CreateNewPoll from './components/CreateNewPoll';\r\nimport ShowPoll from './components/ShowPoll';\r\nimport Register from './components/Register';\r\nimport Login from './components/Login';\r\n\r\n// Global variables for string-references of widgets, for consistency and efficiency in development\r\nconst INTRO = \"Intro\";\r\nconst MAIN_MENU = \"Main Menu\";\r\nconst POLL_MENU = \"Poll Menu\";\r\nconst REGISTER = \"Register\";\r\nconst LOGIN = \"Login\";\r\nconst CREATE_NEW_POLL = \"Create New Poll\";\r\nconst SHOW_POLL = \"Show Poll\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            authenticated: false,\r\n            username: \"\",\r\n            visibleWidgets: [INTRO, POLL_MENU],\r\n            attemptedLogin: false,\r\n            showingPollId: \"\",\r\n            pollMenuNeedsUpdate: false\r\n        };\r\n        this.closeWidget = this.closeWidget.bind(this);\r\n        this.showWidget = this.showWidget.bind(this);\r\n        this.updateParentState = this.updateParentState.bind(this);\r\n        this.bringMenuToFront = this.bringMenuToFront.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Check if user is already logged in to display components accordingly (i.e. Welcome message)\r\n        axios.get('/whoami')\r\n            .then(res => {\r\n                if (res.data) {\r\n                    this.setState({authenticated: true, username: res.data});\r\n                }\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    updateParentState(stateObject) {\r\n        this.setState(stateObject);\r\n    }\r\n\r\n    closeWidget(widgetName) {\r\n        this.setState({visibleWidgets: this.state.visibleWidgets.filter(widget => widget !== widgetName)});\r\n    }\r\n\r\n    showWidget(widgetName) {\r\n        const containsMenu = this.state.visibleWidgets.includes(MAIN_MENU);\r\n        const otherWidgets = this.state.visibleWidgets.filter(widget => widget !== MAIN_MENU);\r\n        const updateArray = [widgetName, ...otherWidgets];\r\n        if (containsMenu) updateArray.unshift(MAIN_MENU);\r\n        this.setState({visibleWidgets: updateArray});\r\n    }\r\n\r\n    bringMenuToFront() {\r\n        const otherWidgets = this.state.visibleWidgets.filter(widget => widget !== MAIN_MENU);\r\n        this.setState({visibleWidgets: [MAIN_MENU, ...otherWidgets]});\r\n    }\r\n\r\n    // componentDidUpdate() {\r\n    //     const widgets = document.getElementsByClassName('widget');\r\n    //     for (let i = 0; i < widgets.length; i++) {\r\n    //         const el = widgets[i];\r\n    //         const curOverflow = el.style.overflow;\r\n    //\r\n    //         if ( !curOverflow || curOverflow === \"visible\" )\r\n    //             el.style.overflow = \"hidden\";\r\n    //\r\n    //         let isOverflowing = el.clientWidth < el.scrollWidth\r\n    //             || el.clientHeight < el.scrollHeight;\r\n    //\r\n    //         el.style.overflowY = isOverflowing ? \"scroll\" : \"hidden\";\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        // Everything in <main> is divided into 'widgets'\r\n        // Each widget displays according to a particular order, if at all\r\n        // The two function expressions below determine whether it is showing, and what order it is if so\r\n        // These are passed as props to each component, or 'widget'\r\n        const orderOf = widgetName => this.state.visibleWidgets.indexOf(widgetName);\r\n        const showing = widgetName => this.state.visibleWidgets.includes(widgetName);\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <p className={\"hamburgerIcon\"} onClick={() => { this.showWidget(MAIN_MENU) }}>&#9776;</p>\r\n                    <h1 id={\"mainTitle\"}>Voting App</h1>\r\n                    <AuthenticationSegment\r\n                        authenticated={this.state.authenticated}\r\n                        username={this.state.username}\r\n                        showRegister={() => this.showWidget(REGISTER)}\r\n                        showLogin={() => this.showWidget(LOGIN)}\r\n                        updateParentState={this.updateParentState}\r\n                    />\r\n                </header>\r\n                <main>\r\n                    <MainMenu\r\n                        widgets={[INTRO, POLL_MENU, CREATE_NEW_POLL, REGISTER, LOGIN]}\r\n                        order={orderOf(MAIN_MENU)}\r\n                        showing={showing(MAIN_MENU)}\r\n                        close={() => {this.closeWidget(MAIN_MENU)}}\r\n                        visibleWidgets={this.state.visibleWidgets}\r\n                        showWidget={this.showWidget}\r\n                        closeWidget={this.closeWidget}\r\n                        bringMenuToFront={this.bringMenuToFront}\r\n                        authenticated={this.state.authenticated}\r\n                        id={MAIN_MENU.replace(/\\s/g, \"\")}\r\n                    />\r\n                    <Intro\r\n                        order={orderOf(INTRO)}\r\n                        showing={showing(INTRO)}\r\n                        close={() => {this.closeWidget(INTRO)}}\r\n                        id={INTRO.replace(/\\s/g, \"\")}\r\n                    />\r\n                    <PollMenu\r\n                        order={orderOf(POLL_MENU)}\r\n                        showing={showing(POLL_MENU)}\r\n                        close={() => {this.closeWidget(POLL_MENU)}}\r\n                        showPoll={() => this.showWidget(SHOW_POLL)}\r\n                        updateParentState={this.updateParentState}\r\n                        needsUpdate={this.state.pollMenuNeedsUpdate}\r\n                        id={POLL_MENU.replace(/\\s/g, \"\")}\r\n                    />\r\n                    <CreateNewPoll\r\n                        order={orderOf(CREATE_NEW_POLL)}\r\n                        showing={showing(CREATE_NEW_POLL)}\r\n                        close={() => {this.closeWidget(CREATE_NEW_POLL)}}\r\n                        authenticated={this.state.authenticated}\r\n                        username={this.state.username}\r\n                        updateParentState={this.updateParentState}\r\n                        id={CREATE_NEW_POLL.replace(/\\s/g, \"\")}\r\n                    />\r\n                    <ShowPoll\r\n                        order={orderOf(SHOW_POLL)}\r\n                        showing={showing(SHOW_POLL)}\r\n                        close={() => {this.closeWidget(SHOW_POLL)}}\r\n                        pollId={this.state.showingPollId}\r\n                        authenticated={this.state.authenticated}\r\n                        username={this.state.username}\r\n                        updateParentState={this.updateParentState}\r\n                        id={SHOW_POLL.replace(/\\s/g, \"\")}\r\n                    />\r\n                    <Register\r\n                        order={orderOf(REGISTER)}\r\n                        showing={showing(REGISTER)}\r\n                        close={() => {this.closeWidget(REGISTER)}}\r\n                        id={REGISTER.replace(/\\s/g, \"\")}\r\n                    />\r\n                    <Login\r\n                        order={orderOf(LOGIN)}\r\n                        showing={showing(LOGIN)}\r\n                        close={() => {this.closeWidget(LOGIN)}}\r\n                        authenticated={this.state.authenticated}\r\n                        attemptedLogin={this.state.attemptedLogin}\r\n                        updateParentState={this.updateParentState}\r\n                        id={LOGIN.replace(/\\s/g, \"\")}\r\n                    />\r\n                    <p className={\"noWidgetMsg\"} onClick={() => { this.showWidget(MAIN_MENU) }}>\r\n                        {this.state.visibleWidgets.length === 0 ? \"Click here or ☰ for the menu\" : \"\"}\r\n                    </p>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = (order, showing) => {\r\n    return {\r\n        order,\r\n        display: (showing ? \"block\" : \"none\"),\r\n        width: 400,\r\n        animation: `appear 1s ease-out ${order*100}ms forwards`\r\n    };\r\n};"],"sourceRoot":""}