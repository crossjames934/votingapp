{"version":3,"sources":["components/AuthenticationSegment.js","components/CloseWidgetBtn.js","components/MainMenu.js","components/Intro.js","components/PollMenu.js","components/MyPolls.js","components/CreateNewPoll.js","components/Chart.js","components/ShowPoll.js","components/Register.js","components/Login.js","App.js","serviceWorker.js","index.js","components/widgetStyle.js"],"names":["AuthenticationSegment","logout","axios","get","then","res","console","log","data","_this","props","updateParentState","authenticated","username","attemptedLogin","pollMenuNeedsUpdate","catch","e","alert","react_default","a","createElement","className","onClick","this","showRegister","showLogin","notAuthenticated","Component","CloseWidgetBtn","close","MainMenu","visibleOptions","Object","toConsumableArray","widgets","listItems","filter","option","map","widget","liStyle","textShadow","visibleWidgets","includes","cursor","displayWidget","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","showWidget","bringMenuToFront","scrollToTarget","stop","apply","arguments","key","style","id","widgetStyle","order","showing","components_CloseWidgetBtn","options","Intro","RECENT","PollMenu","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchQuery","list","sortBy","showList","bind","assertThisInitialized","handleChange","getPollList","listCall","forEach","poll","dateAdded","Date","lastVotedOn","setState","sortList","t0","_this2","length","regex","RegExp","test","question","showIfVoted","display","userHasVoted","window","scrollTo","showingPollId","showPoll","category","sort","b","defineProperty","target","name","value","needsUpdate","_this3","isSelected","choice","textDecoration","createNew","onChange","type","MyPolls","errorMessage","polls","previousUsername","getMyPolls","post","error","message","_id","CreateNewPoll","choices","submitAttempted","submitSucceeded","handleSubmit","addNewChoice","author","response","status","preventDefault","width","height","index","arrayForUpdate","slice","required","splice","blankSpace","concat","_this4","onSubmit","showSubmitStatus","showForm","Chart","createChart","choiceArr","dataForPie","responseData","datum","count","chart","document","getElementById","innerHTML","radius","Math","min","svg","d3","append","attr","color","domain","range","data_ready","d","pie","arc","innerRadius","outerRadius","outerArc","selectAll","enter","posA","centroid","posB","posC","midangle","startAngle","endAngle","PI","text","pos","ShowPoll","pollId","submittedVote","pollData","justLooking","voteResponse","getPollData","pollCall","_context2","ip","_context3","castVote","choiceCount","push","components_Chart","showResults","showChoiceBtns","Register","password","email","submitted","successMessage","_this$state","setTimeout","showSuccess","registrationForm","Login","failedMessage","loggedIn","closeRegister","loginForm","INTRO","MAIN_MENU","POLL_MENU","App","closeWidget","stateObject","widgetName","otherWidgets","updateArray","unshift","classList","remove","add","yTarget","innerWidth","innerHeight","orderOf","indexOf","showMenu","components_AuthenticationSegment","components_MainMenu","replace","components_Intro","components_PollMenu","components_MyPolls","components_CreateNewPoll","components_ShowPoll","components_Register","components_Login","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister","module","exports","animation"],"mappings":"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","file":"static/js/main.985603c9.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\n\nclass AuthenticationSegment extends Component {\n    logout = () => {\n        axios.get('/logout')\n            .then(res => {\n                console.log(res.data);\n                // this.props.updateAuthenticationStatus(false, \"\");\n                this.props.updateParentState({\n                    authenticated: false,\n                    username: \"\",\n                    attemptedLogin: false,\n                    pollMenuNeedsUpdate: true\n                });\n            })\n            .catch(e => {\n                alert(\"There was an error connecting, please check console for the error\");\n                console.log(e);\n            });\n    };\n\n    notAuthenticated() {\n        return(\n            <div className=\"authenticationLinks\">\n                <p className=\"clickableText\" onClick={this.props.showRegister}>Register</p>\n                <p> || </p>\n                <p className=\"clickableText\" onClick={this.props.showLogin}>Log In</p>\n            </div>\n        );\n    }\n\n    authenticated() {\n        return(\n            <div>\n                <p>Welcome {this.props.username}</p>\n                <p className=\"clickableText\" onClick={this.logout}>Sign Out</p>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.authenticated ? this.authenticated() : this.notAuthenticated()}\n            </div>\n        );\n    }\n}\n\nexport default AuthenticationSegment;","import React, {Component} from 'react';\n\nclass CloseWidgetBtn extends Component {\n    render() {\n        return (\n            <div className={\"closeWidgetBtn\"}>\n                <p onClick={this.props.close} className={\"innerX\"}>X</p>\n            </div>\n        );\n    }\n}\n\nexport default CloseWidgetBtn;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass MainMenu extends Component {\n    options() {\n        let visibleOptions = [...this.props.widgets];\n        if (this.props.authenticated) {\n            visibleOptions = visibleOptions.filter(option => option !== \"Login\" && option !== \"Register\");\n        } else {\n            visibleOptions = visibleOptions.filter(option => option !== \"My Polls\");\n        }\n        let listItems = visibleOptions.map(widget => {\n            const widgetShowing = this.props.visibleWidgets.includes(widget);\n            const liStyle = {\n                textShadow: widgetShowing ? \"0 0 2px gold\" : \"none\",\n                cursor: \"pointer\"\n            };\n            const displayWidget = async () => {\n                await this.props.showWidget(widget);\n                this.props.bringMenuToFront();\n                this.props.scrollToTarget();\n            };\n            return (\n                <li key={widget} onClick={displayWidget} style={liStyle}>{widget}</li>\n            );\n        });\n        return(\n            <ul className={\"mainMenuOptions\"}>\n                {listItems}\n            </ul>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2 id={'menuHeader'}>Main Menu</h2>\n                    {this.options()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MainMenu;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Intro extends Component {\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Welcome to Cross Voting</h2>\n                    <p>Here you can make your own polls, and have your friends vote on them.</p>\n                    <p>You can do all this without making an account, but if you want your poll to be associated with your username, you will need to register.</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Intro;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\n// Strings stored in global variables for consistency and production ease. Used in sorting function.\nconst RECENT = 'dateAdded';\nconst LAST_VOTE = 'lastVotedOn';\nconst MOST_VOTES = 'voteCount';\n\nclass PollMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchQuery: \"\",\n            list: [],\n            sortBy: RECENT\n        };\n        this.showList = this.showList.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.getPollList();\n    }\n\n    async getPollList() {\n        try {\n            const listCall = await axios.get('pollList');\n            const list = listCall.data;\n            list.forEach(poll => {\n               poll.dateAdded = new Date(poll.dateAdded);\n               poll.lastVotedOn = new Date(poll.lastVotedOn);\n            });\n            await this.setState({list});\n            this.sortList(this.state.sortBy);\n        } catch (e) {\n            alert('There was an error getting polls from the server, see console for error.');\n            console.log(e);\n        }\n    }\n\n    showList() {\n        let list = this.state.list;\n        if (this.state.searchQuery.length > 0) {\n            try {\n                const regex = new RegExp(this.state.searchQuery, 'gi');\n                list = list.filter(poll => regex.test(poll.question));\n            } catch (e) {\n                console.log('invalid regex');\n            }\n        }\n        return list.map(poll => {\n            const showIfVoted = {\n                display: poll.userHasVoted ? \"flex\" : \"none\"\n            };\n            return(\n                <div className={'flexCenter'}>\n                    <p className={\"pollMenuChoice clickableText\"} onClick={() => {\n                        window.scrollTo(0, 0);\n                        this.props.updateParentState({showingPollId: poll.id});\n                        this.props.showPoll();\n                    }}>{poll.question}</p>\n                    <p\n                        // onMouseOver={this.setState({showingToolTip: true})}\n                        // onMouseOut={this.setState({showingToolTip: false})}\n                        style={showIfVoted}\n                        className={'votedSign'}\n                    >V</p>\n                </div>\n            );\n        })\n    }\n\n    sortList(category) {\n        const list = this.state.list.sort((a,b) => b[category] - a[category]);\n        this.setState({list, sortBy: category}, this.showList);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    componentDidUpdate() {\n        if (this.props.needsUpdate) {\n            this.props.updateParentState({pollMenuNeedsUpdate: false});\n            this.getPollList();\n        }\n    }\n\n    render() {\n        // isSelected underlines the currently chosen sort-by option\n        const isSelected = (choice) => ({\n            textDecoration: choice === this.state.sortBy ? 'underline' : 'none'\n        });\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Poll Menu</h2>\n                    <div>\n                        <p onClick={this.props.createNew} className=\"clickableText\">Create New Poll</p>\n                        <input\n                            onChange={this.handleChange}\n                            name='searchQuery'\n                            value={this.state.searchQuery}\n                            className={'searchBar'}\n                            type='text'\n                        />\n                        <div className=\"sortBy\">\n                            <p style={isSelected(RECENT)} onClick={() => { this.sortList(RECENT) }} className={'clickableText'}>Recently made</p>\n                            <p style={isSelected(LAST_VOTE)} onClick={() => { this.sortList(LAST_VOTE) }} className={'clickableText'}>Last voted on</p>\n                            <p style={isSelected(MOST_VOTES)} onClick={() => { this.sortList(MOST_VOTES) }} className={'clickableText'}>Most votes</p>\n                        </div>\n                        <hr/>\n                        {this.showList()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PollMenu;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass MyPolls extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            errorMessage: \"\",\n            polls: [],\n            previousUsername: \"\"\n        }\n    }\n\n    componentDidMount() {\n        this.getMyPolls();\n    }\n\n    componentDidUpdate() {\n        if (this.state.previousUsername !== this.props.username) {\n            this.setState({\n                previousUsername: this.props.username,\n                polls: []\n            }, this.getMyPolls);\n        }\n    }\n\n    async getMyPolls() {\n        if (!this.props.authenticated) return;\n        try {\n            const res = await axios.post('/myPolls', {username: this.props.username});\n            const data = res.data;\n            if (data.error) {\n                console.log(data.error);\n                return this.setState({errorMessage: data.message});\n            }\n            // success\n            this.setState({polls: data.polls, errorMessage: \"\"});\n        } catch (e) {\n            this.setState({errorMessage: \"There was a problem connecting, see console for the error\"});\n            console.log(e);\n        }\n    }\n\n    showList() {\n        if (!this.props.authenticated) return (<p className={'red'}>Please log in to see poll list</p>);\n        return this.state.polls.map(poll => {\n            const choosePoll = () => {\n                window.scrollTo(0, 0);\n                this.props.updateParentState({showingPollId: poll._id});\n                this.props.showPoll();\n            };\n            return(\n                <p className={'clickableText'} onClick={choosePoll}>{poll.question}</p>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>My Polls</h2>\n                    <p onClick={this.props.createNew} className=\"clickableText\">Create New Poll</p>\n                    <hr/>\n                    {this.showList()}\n                    <p className=\"red\">{this.state.errorMessage}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MyPolls;","import React, {Component} from 'react';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\nimport axios from \"axios\";\n\nclass CreateNewPoll extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            question: \"\",\n            choices: [\"\", \"\"],\n            submitAttempted: false,\n            submitSucceeded: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.addNewChoice = this.addNewChoice.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    async handleSubmit(e) {\n        await this.setState({submitAttempted: true});\n        const author = this.props.username;\n        const { question, choices } = this.state;\n        axios.post('/poll', {question, choices, author})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem after connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                this.setState({\n                    question: \"\",\n                    choices: [\"\", \"\"],\n                    submitSucceeded: true\n                });\n                this.props.updateParentState({pollMenuNeedsUpdate: true});\n            })\n            .catch((response) => {\n                //handle error\n                this.setState({\n                    submitSucceeded: false,\n                    submitAttempted: false\n                });\n                console.log(response);\n            });\n        e.preventDefault();\n    }\n\n    blankSpace() {\n        return (\n            <div style={{width: 30, height: 30}}> </div>\n        );\n    }\n\n    choices() {\n        // For each choice, generate an input field with label\n        return this.state.choices.map((choice, index) => {\n            const changeChoice = e => {\n                const arrayForUpdate = this.state.choices.slice();\n                arrayForUpdate[index] = e.target.value;\n                this.setState({choices: arrayForUpdate});\n            };\n            const deleteChoice = () => {\n                let arrayForUpdate = this.state.choices.slice();\n                arrayForUpdate.splice(index, 1);\n                this.setState({choices: arrayForUpdate});\n\n            };\n            return(\n                <div key={\"choice_\"+index} className=\"spaceAround\">\n                    <p>Choice {index+1}: </p>\n                    <input onChange={changeChoice} value={this.state.choices[index]} type=\"text\" required/>\n                    {\n                        // If there's more than 2 choices, you can delete one\n                        this.state.choices.length > 2 ?\n                        <p onClick={deleteChoice} className={\"innerX\"}>X</p> :\n                        this.blankSpace()\n                    }\n                </div>\n            )\n        });\n    }\n\n    addNewChoice(e) {\n        this.setState({choices: [...this.state.choices, \"\"]});\n        e.preventDefault();\n    }\n\n    showSubmitStatus() {\n        const message = this.state.submitSucceeded ? \"Poll successfully submitted\" : \"Sending...\";\n        const goBack = () => {\n            this.setState({\n                submitAttempted: false,\n                submitSucceeded: false\n            });\n        };\n        return(\n            <div>\n                <p className={\"red\"}>{message}</p>\n                <p onClick={goBack} className=\"clickableText\">Back</p>\n            </div>\n        );\n    }\n\n    showForm() {\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"spaceAround\">\n                    <p>Question: </p>\n                    <input name={\"question\"} onChange={this.handleChange} type=\"text\" value={this.state.question} required/>\n                    {this.blankSpace()}\n                </div>\n                {this.choices()}\n                <button className={\"addNewChoiceBtn\"} onClick={this.addNewChoice}>Add New Choice</button>\n                <br/>\n                <input className={\"submitBtn\"} type=\"submit\" value=\"Submit Poll\"/>\n            </form>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Create New Poll</h2>\n                    {this.state.submitAttempted ? this.showSubmitStatus() : this.showForm()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CreateNewPoll;","import React, {Component} from 'react';\nimport * as d3 from 'd3';\n\nclass Chart extends Component {\n    componentDidMount() {\n        this.createChart();\n    }\n\n    createChart() {\n        const choiceArr = this.props.choiceArr;\n        const dataForPie = {};\n        this.props.responseData.forEach(datum => {\n            if (datum.count) dataForPie[datum.choice] = datum.count;\n        });\n        const chart = document.getElementById('donut_chart');\n        if (chart) chart.innerHTML = \"\";\n        const width = 350;\n        const height = 250;\n        const margin = 40;\n\n        // The radius of the pieplot is half the width or half the height (smallest one). I substract a bit of margin.\n        const radius = Math.min(width, height) / 2 - margin;\n\n        const svg = d3.select(\"#donut_chart\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n        const data = dataForPie;\n\n        // Colour scale\n        const color = d3.scaleOrdinal()\n            .domain(choiceArr)\n            .range(d3.schemeAccent);\n\n        // Create the pie chart\n        const pie = d3.pie()\n            .sort(null) // Do not sort group by size\n            .value(d => d.value);\n        const data_ready = pie(d3.entries(data));\n\n        // The arc generator\n        const arc = d3.arc()\n            .innerRadius(radius * 0.4)         // This is the size of the donut hole\n            .outerRadius(radius * 0.8);\n\n        // Another arc that won't be drawn. Just for labels positionning\n        const outerArc = d3.arc()\n            .innerRadius(radius * 0.9)\n            .outerRadius(radius * 0.9);\n\n        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n        svg\n            .selectAll('allSlices')\n            .data(data_ready)\n            .enter()\n            .append('path')\n            .attr('d', arc)\n            .attr('fill', d => color(d.data.key))\n            .attr(\"stroke\", \"white\")\n            .style(\"stroke-width\", \"2px\")\n            .style(\"opacity\", 0.7);\n\n        // Add the polylines between chart and labels:\n        svg\n            .selectAll('allPolylines')\n            .data(data_ready)\n            .enter()\n            .append('polyline')\n            .attr(\"stroke\", \"black\")\n            .style(\"fill\", \"none\")\n            .attr(\"stroke-width\", 1)\n            .attr('points', d => {\n                const posA = arc.centroid(d); // line insertion in the slice\n                const posB = outerArc.centroid(d); // line break: we use the other arc generator that has been built only for that\n                const posC = outerArc.centroid(d); // Label position = almost the same as posB\n                const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2; // we need the angle to see if the X position will be at the extreme right or extreme left\n                posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n                return [posA, posB, posC];\n            });\n\n        // Add the polylines between chart and labels:\n        svg\n            .selectAll('allLabels')\n            .data(data_ready)\n            .enter()\n            .append('text')\n            .text( d => d.data.key )\n            .attr('transform', d => {\n                const pos = outerArc.centroid(d);\n                const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n                pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n                return 'translate(' + pos + ')';\n            })\n            .style('text-anchor', d => {\n                const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n                return (midangle < Math.PI ? 'start' : 'end')\n            });\n    }\n\n    render() {\n        return (\n            <div id=\"donut_chart\"/>\n        );\n    }\n}\n\nexport default Chart;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\nimport Chart from './Chart';\n\nclass ShowPoll extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pollId: this.props.pollId,\n            submittedVote: false,\n            pollData: {\n                question: \"\",\n                choices: [],\n                author: \"\"\n            },\n            responseData: []\n        }\n    }\n\n    // Refresh widget if user has chosen to display new poll\n    async componentDidUpdate() {\n        if (this.props.pollId !== this.state.pollId) {\n            const voteResponse = await axios.post('/castVote', {\n                choice: null,\n                id: this.props.pollId,\n                username: this.props.username,\n                justLooking: true\n            });\n            this.setState({\n                pollId: this.props.pollId,\n                responseData: voteResponse.data,\n                submittedVote: false\n            }, this.getPollData);\n        }\n    }\n\n    async getPollData() {\n        try {\n            const pollCall = await axios.get('pollData/' + this.props.pollId);\n            const pollData = pollCall.data;\n            this.setState({pollData});\n        } catch (e) {\n            alert(\"There was an error getting the poll data from the server\");\n            console.log(e);\n        }\n    }\n\n    async castVote(choice) {\n        try {\n            let username = this.props.username;\n            if (!this.props.authenticated) {\n                const ip = await axios.get('ip');\n                username = ip.data;\n            }\n            const voteResponse = await axios.post('/castVote', {choice, id: this.props.pollId, username, justLooking: false});\n            this.setState({\n                responseData: voteResponse.data,\n                submittedVote: true\n            });\n            this.props.updateParentState({pollMenuNeedsUpdate: true});\n        } catch (e) {\n            alert(\"There was an error getting information to or from the server. Please check console for error.\");\n            console.log(e);\n        }\n\n    }\n\n    showChoiceBtns() {\n        let choices = this.state.pollData ?\n            this.state.pollData.choices.map(choice =>\n                <button\n                    className={\"choiceBtn\"}\n                    onClick={() => this.castVote(choice)}>\n                    {choice}\n                </button>) :\n            \"Could not connect to server.\";\n        const seeResults = () => {\n            this.setState({submittedVote: true});\n        };\n        return(\n            <div className={\"userChoices\"}>\n                {choices}\n                <p className={'clickableText navigationText'} onClick={seeResults}>See Results</p>\n            </div>\n        );\n    }\n\n    showResults() {\n        let choiceArr = [];\n        const choiceCount = this.state.responseData.map(datum => {\n            const {choice, count} = datum;\n            if (count > 0) choiceArr.push(choice);\n            return(<p>{choice}: {count} votes</p>)\n        });\n        const changeVote = () => {\n            this.setState({submittedVote: false});\n        };\n        return(\n            <div>\n                <h3>Results:</h3>\n                <Chart choiceArr={choiceArr} responseData={this.state.responseData}/>\n                {choiceCount}\n                <p className={'clickableText navigationText'} onClick={changeVote}>Change Vote</p>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>{this.state.pollData.question}</h2>\n                    {this.state.submittedVote ? this.showResults() : this.showChoiceBtns()}\n                    <p>Created By: {this.state.pollData.author || \"Anonymous\"}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ShowPoll;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            email: \"\",\n            submitted: false,\n            errorMessage: \"\"\n        };\n        this.successMessage = \"Registered successfully, please check email for activation link.\";\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmit(e) {\n        const { username, password, email } = this.state;\n        axios.post('/register', {username, password, email})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                // problem with information (email already in use etc)\n                if (response.data !== this.successMessage) {\n                    return this.setState({errorMessage: response.data}, () => {\n                        setTimeout(() => {\n                            this.setState({errorMessage: \"\"});\n                        }, 5000);\n                    });\n                }\n                // Successful registration\n                this.setState({\n                    username: \"\",\n                    password: \"\",\n                    email: \"\",\n                    submitted: true,\n                    errorMessage: \"\",\n                });\n            })\n            .catch((response) => {\n                //handle error\n                alert(\"There was a problem connecting to the server, see console for more information\");\n                return console.log(response);\n            });\n        e.preventDefault();\n    }\n\n    registrationForm() {\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"spaceAround\">\n                    <p>Username:</p>\n                    <input\n                        onChange={this.handleChange}\n                        name=\"username\"\n                        type=\"text\"\n                        id=\"registeringUsername\"\n                        value={this.state.username}\n                        required\n                    />\n                </div>\n                <div className=\"spaceAround\">\n                    <p>Password:</p>\n                    <input\n                        onChange={this.handleChange}\n                        name=\"password\"\n                        type=\"password\"\n                        id=\"registeringPassword\"\n                        value={this.state.password}\n                        required\n                    />\n                </div>\n                <div className=\"spaceAround\">\n                    <p>Email:</p>\n                    <input\n                        onChange={this.handleChange}\n                        name=\"email\"\n                        type=\"email\"\n                        id=\"registeringEmail\"\n                        value={this.state.email}\n                        required\n                    />\n                </div>\n                <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\n                <p className={\"red\"}>{this.state.errorMessage}</p>\n            </form>\n        );\n    }\n\n    showSuccess() {\n        return(\n            <div>\n                <p>{this.successMessage}</p>\n                <p className={\"red\"}>You may need to check the spam folder.</p>\n                <p className={\"clickableText\"} onClick={() => {this.setState({submitted: false})}}>Back</p>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Register</h2>\n                    {this.state.submitted ? this.showSuccess() : this.registrationForm()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Register;","import React, {Component} from 'react';\nimport axios from \"axios\";\n\nimport CloseWidgetBtn from './CloseWidgetBtn';\nimport widgetStyle from './widgetStyle';\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            failedMessage: \"\"\n        };\n        // this.loginTimeout = null;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmit(e) {\n        this.props.updateParentState({attemptedLogin: true});\n        // this.loginTimeout = setTimeout(() => {\n        //\n        // }, 10000);\n        this.setState({failedMessage: \"\"});\n        const { username, password } = this.state;\n        axios.post('/login', {username, password})\n            .then((response) => {\n                //handle success\n                if (response.status !== 200) {\n                    alert(\"There was a problem after connecting to the server, see console for more information\");\n                    return console.log(response);\n                }\n                if (response.data.loggedIn) {\n                    // update log in status of parent\n                    this.props.updateParentState({\n                        authenticated: true,\n                        username: response.data.message,\n                        pollMenuNeedsUpdate: true\n                    });\n                    // Must clear fields for cyber-security!\n                    this.setState({\n                        username: \"\",\n                        password: \"\"\n                    });\n                    // close widget after 2 seconds\n                    this.props.closeRegister();\n                    setTimeout(this.props.close, 2000);\n                } else {\n                    this.setState({failedMessage: response.data.message});\n                    this.props.updateParentState({attemptedLogin: false});\n                }\n            })\n            .catch((response) => {\n                //handle error\n                console.log(response);\n                this.setState({\n                    failedMessage: \"Trouble connecting to server. Potentially from loss of internet connection. See console for more details\"\n                });\n                this.props.updateParentState({attemptedLogin: false});\n            });\n        e.preventDefault();\n    }\n\n    attemptedLogin() {\n        const message = this.props.authenticated ? \"You have logged in successfully!\" : \"Please wait...\";\n        return(\n            <div>\n                <p>{message}</p>\n            </div>\n        );\n    }\n\n    loginForm() {\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"spaceAround\">\n                        <p>Username:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"username\"\n                            type=\"text\"\n                            id=\"loginUsername\"\n                            value={this.state.username}\n                            required\n                        />\n                    </div>\n                    <div className=\"spaceAround\">\n                        <p>Password:</p>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"password\"\n                            type=\"password\"\n                            id=\"loginPassword\"\n                            value={this.state.password}\n                            required\n                        />\n                    </div>\n                    <input className={\"submitBtn\"} type=\"submit\" value=\"Submit\"/>\n                </form>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div id={this.props.id} className={\"widget\"} style={widgetStyle(this.props.order, this.props.showing)}>\n                <div className=\"scrollable\">\n                    <CloseWidgetBtn close={this.props.close}/>\n                    <h2>Login</h2>\n                    {this.props.attemptedLogin ? this.attemptedLogin() : this.loginForm()}\n                    <p className={\"red\"}>{this.state.failedMessage}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;","// Dependencies\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './stylesheets/App.css';\n// import VotingImg from './images/voting.jpg';\n\n// My Modules\nimport AuthenticationSegment from './components/AuthenticationSegment';\nimport MainMenu from './components/MainMenu';\nimport Intro from './components/Intro';\nimport PollMenu from './components/PollMenu';\nimport MyPolls from './components/MyPolls';\nimport CreateNewPoll from './components/CreateNewPoll';\nimport ShowPoll from './components/ShowPoll';\nimport Register from './components/Register';\nimport Login from './components/Login';\n\n// Global variables for string-references of widgets, for consistency and efficiency in development\nconst INTRO = \"Intro\";\nconst MAIN_MENU = \"Main Menu\";\nconst POLL_MENU = \"Poll Menu\";\nconst MY_POLLS = \"My Polls\";\nconst REGISTER = \"Register\";\nconst LOGIN = \"Login\";\nconst CREATE_NEW_POLL = \"Create New Poll\";\nconst SHOW_POLL = \"Show Poll\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            authenticated: false,\n            username: \"\",\n            visibleWidgets: [INTRO, POLL_MENU],\n            attemptedLogin: false,\n            showingPollId: \"\",\n            pollMenuNeedsUpdate: false\n        };\n        this.closeWidget = this.closeWidget.bind(this);\n        this.showWidget = this.showWidget.bind(this);\n        this.updateParentState = this.updateParentState.bind(this);\n        this.bringMenuToFront = this.bringMenuToFront.bind(this);\n        this.scrollToTarget = this.scrollToTarget.bind(this);\n    }\n\n    componentDidMount() {\n        // Check if user is already logged in to display components accordingly (i.e. Welcome message)\n        axios.get('/whoami')\n            .then(res => {\n                if (res.data) {\n                    this.setState({authenticated: true, username: res.data});\n                }\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    updateParentState(stateObject) {\n        this.setState(stateObject);\n    }\n\n    closeWidget(widgetName) {\n        this.setState({visibleWidgets: this.state.visibleWidgets.filter(widget => widget !== widgetName)});\n    }\n\n    showWidget(widgetName) {\n        const otherWidgets = this.state.visibleWidgets.filter(widget => widget !== MAIN_MENU);\n        const updateArray = [widgetName, ...otherWidgets];\n        // put main menu to left if open\n        const containsMenu = this.state.visibleWidgets.includes(MAIN_MENU);\n        if (containsMenu) updateArray.unshift(MAIN_MENU);\n        this.setState({visibleWidgets: updateArray}, () => {\n            if (widgetName !== MAIN_MENU) this.scrollToTarget();\n        });\n    }\n\n    showMenu() {\n        if (this.state.visibleWidgets.includes(MAIN_MENU)) {\n            document.getElementById('menuHeader').classList.remove('shine');\n            setTimeout(() => {\n                document.getElementById('menuHeader').classList.add('shine');\n            }, 100);\n        }\n        this.showWidget(MAIN_MENU);\n        window.scrollTo(0, 0);\n    }\n\n    bringMenuToFront() {\n        const otherWidgets = this.state.visibleWidgets.filter(widget => widget !== MAIN_MENU);\n        this.setState({visibleWidgets: [MAIN_MENU, ...otherWidgets]});\n    }\n\n    scrollToTarget() {\n        const yTarget = window.innerWidth < 855 && this.state.visibleWidgets.includes(MAIN_MENU) ? window.innerHeight * 0.74 : 0;\n        window.scrollTo(0, yTarget);\n    }\n\n    render() {\n        // Everything in <main> is divided into 'widgets'\n        // Each widget displays according to a particular order, if at all\n        // The two function expressions below determine whether it is showing, and what order it is if so\n        // These are passed as props to each component, or 'widget'\n        const orderOf = widgetName => this.state.visibleWidgets.indexOf(widgetName);\n        const showing = widgetName => this.state.visibleWidgets.includes(widgetName);\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <p className={\"hamburgerIcon\"} onClick={() => { this.showMenu() }}>&#9776;</p>\n                    <h1 id={\"mainTitle\"}>Voting App</h1>\n                    <AuthenticationSegment\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        showRegister={() => {this.showWidget(REGISTER)}}\n                        showLogin={() => {this.showWidget(LOGIN)}}\n                        scrollToTarget={this.scrollToTarget}\n                        updateParentState={this.updateParentState}\n                    />\n                </header>\n                <main>\n                    <MainMenu\n                        widgets={[INTRO, POLL_MENU, MY_POLLS, CREATE_NEW_POLL, REGISTER, LOGIN]}\n                        order={orderOf(MAIN_MENU)}\n                        showing={showing(MAIN_MENU)}\n                        close={() => {this.closeWidget(MAIN_MENU)}}\n                        visibleWidgets={this.state.visibleWidgets}\n                        showWidget={this.showWidget}\n                        closeWidget={this.closeWidget}\n                        bringMenuToFront={this.bringMenuToFront}\n                        authenticated={this.state.authenticated}\n                        scrollToTarget={this.scrollToTarget}\n                        id={MAIN_MENU.replace(/\\s/g, \"\")}\n                    />\n                    <Intro\n                        order={orderOf(INTRO)}\n                        showing={showing(INTRO)}\n                        close={() => {this.closeWidget(INTRO)}}\n                        id={INTRO.replace(/\\s/g, \"\")}\n                    />\n                    <PollMenu\n                        order={orderOf(POLL_MENU)}\n                        showing={showing(POLL_MENU)}\n                        close={() => {this.closeWidget(POLL_MENU)}}\n                        showPoll={() => {this.showWidget(SHOW_POLL)}}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        needsUpdate={this.state.pollMenuNeedsUpdate}\n                        createNew={() => { this.showWidget(CREATE_NEW_POLL)}}\n                        id={POLL_MENU.replace(/\\s/g, \"\")}\n                    />\n                    <MyPolls\n                        order={orderOf(MY_POLLS)}\n                        showing={showing(MY_POLLS)}\n                        close={() => {this.closeWidget(MY_POLLS)}}\n                        showPoll={() => this.showWidget(SHOW_POLL)}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        createNew={() => { this.showWidget(CREATE_NEW_POLL)}}\n                        id={MY_POLLS.replace(/\\s/g, \"\")}\n                    />\n                    <CreateNewPoll\n                        order={orderOf(CREATE_NEW_POLL)}\n                        showing={showing(CREATE_NEW_POLL)}\n                        close={() => {this.closeWidget(CREATE_NEW_POLL)}}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        id={CREATE_NEW_POLL.replace(/\\s/g, \"\")}\n                    />\n                    <ShowPoll\n                        order={orderOf(SHOW_POLL)}\n                        showing={showing(SHOW_POLL)}\n                        close={() => {this.closeWidget(SHOW_POLL)}}\n                        pollId={this.state.showingPollId}\n                        authenticated={this.state.authenticated}\n                        username={this.state.username}\n                        updateParentState={this.updateParentState}\n                        id={SHOW_POLL.replace(/\\s/g, \"\")}\n                    />\n                    <Register\n                        order={orderOf(REGISTER)}\n                        showing={showing(REGISTER)}\n                        close={() => {this.closeWidget(REGISTER)}}\n                        authenticated={this.state.authenticated}\n                        id={REGISTER.replace(/\\s/g, \"\")}\n                    />\n                    <Login\n                        order={orderOf(LOGIN)}\n                        showing={showing(LOGIN)}\n                        close={() => {this.closeWidget(LOGIN)}}\n                        closeRegister={() => {this.closeWidget(REGISTER)}}\n                        authenticated={this.state.authenticated}\n                        attemptedLogin={this.state.attemptedLogin}\n                        updateParentState={this.updateParentState}\n                        id={LOGIN.replace(/\\s/g, \"\")}\n                    />\n                    <p className={\"noWidgetMsg\"} onClick={() => { this.showWidget(MAIN_MENU) }}>\n                        {this.state.visibleWidgets.length === 0 ? \"Click here or ☰ for the menu\" : \"\"}\n                    </p>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = (order, showing) => {\n    return {\n        order,\n        display: (showing ? \"block\" : \"none\"),\n        width: 400,\n        animation: `appear 1s ease-out ${order*100}ms forwards`\n    };\n};"],"sourceRoot":""}